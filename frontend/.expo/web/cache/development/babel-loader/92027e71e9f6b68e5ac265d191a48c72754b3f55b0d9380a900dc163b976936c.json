{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from 'expo-modules-core';\nimport { CryptoEncoding } from \"./Crypto.types\";\nvar getCrypto = function getCrypto() {\n  var _window$crypto;\n  return (_window$crypto = window.crypto) != null ? _window$crypto : window.msCrypto;\n};\nexport default {\n  digestStringAsync: function digestStringAsync(algorithm, data, options) {\n    return function _callee() {\n      var encoder, buffer, hashedData;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (crypto.subtle) {\n              _context.next = 2;\n              break;\n            }\n            throw new CodedError('ERR_CRYPTO_UNAVAILABLE', 'Access to the WebCrypto API is restricted to secure origins (localhost/https).');\n          case 2:\n            encoder = new TextEncoder();\n            buffer = encoder.encode(data);\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(crypto.subtle.digest(algorithm, buffer));\n          case 6:\n            hashedData = _context.sent;\n            if (!(options.encoding === CryptoEncoding.HEX)) {\n              _context.next = 11;\n              break;\n            }\n            return _context.abrupt(\"return\", hexString(hashedData));\n          case 11:\n            if (!(options.encoding === CryptoEncoding.BASE64)) {\n              _context.next = 13;\n              break;\n            }\n            return _context.abrupt(\"return\", btoa(String.fromCharCode.apply(String, _toConsumableArray(new Uint8Array(hashedData)))));\n          case 13:\n            throw new CodedError('ERR_CRYPTO_DIGEST', 'Invalid encoding type provided.');\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getRandomBytes: function getRandomBytes(length) {\n    var array = new Uint8Array(length);\n    return getCrypto().getRandomValues(array);\n  },\n  getRandomBytesAsync: function getRandomBytesAsync(length) {\n    return function _callee2() {\n      var array;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            array = new Uint8Array(length);\n            return _context2.abrupt(\"return\", getCrypto().getRandomValues(array));\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getRandomValues: function getRandomValues(typedArray) {\n    return getCrypto().getRandomValues(typedArray);\n  },\n  randomUUID: function randomUUID() {\n    return getCrypto().randomUUID();\n  },\n  digestAsync: function digestAsync(algorithm, data) {\n    return getCrypto().subtle.digest(algorithm, data);\n  }\n};\nfunction hexString(buffer) {\n  var byteArray = new Uint8Array(buffer);\n  var hexCodes = _toConsumableArray(byteArray).map(function (value) {\n    var hexCode = value.toString(16);\n    var paddedHexCode = hexCode.padStart(2, '0');\n    return paddedHexCode;\n  });\n  return hexCodes.join('');\n}","map":{"version":3,"names":["CodedError","CryptoEncoding","getCrypto","_window$crypto","window","crypto","msCrypto","digestStringAsync","algorithm","data","options","_callee","encoder","buffer","hashedData","_regeneratorRuntime","async","_callee$","_context","prev","next","subtle","TextEncoder","encode","awrap","digest","sent","encoding","HEX","abrupt","hexString","BASE64","btoa","String","fromCharCode","apply","_toConsumableArray","Uint8Array","stop","Promise","getRandomBytes","length","array","getRandomValues","getRandomBytesAsync","_callee2","_callee2$","_context2","typedArray","randomUUID","digestAsync","byteArray","hexCodes","map","value","hexCode","toString","paddedHexCode","padStart","join"],"sources":["C:\\Users\\alexd\\Documents\\InstagramClone\\frontend\\node_modules\\expo-crypto\\src\\ExpoCrypto.web.ts"],"sourcesContent":["import { CodedError, TypedArray } from 'expo-modules-core';\n\nimport { CryptoDigestAlgorithm, CryptoEncoding, CryptoDigestOptions } from './Crypto.types';\n\nconst getCrypto = (): Crypto => window.crypto ?? (window as any).msCrypto;\n\nexport default {\n  async digestStringAsync(\n    algorithm: CryptoDigestAlgorithm,\n    data: string,\n    options: CryptoDigestOptions\n  ): Promise<string> {\n    if (!crypto.subtle) {\n      throw new CodedError(\n        'ERR_CRYPTO_UNAVAILABLE',\n        'Access to the WebCrypto API is restricted to secure origins (localhost/https).'\n      );\n    }\n    const encoder = new TextEncoder();\n    const buffer = encoder.encode(data);\n    const hashedData = await crypto.subtle.digest(algorithm, buffer);\n    if (options.encoding === CryptoEncoding.HEX) {\n      return hexString(hashedData);\n    } else if (options.encoding === CryptoEncoding.BASE64) {\n      return btoa(String.fromCharCode(...new Uint8Array(hashedData)));\n    }\n    throw new CodedError('ERR_CRYPTO_DIGEST', 'Invalid encoding type provided.');\n  },\n  getRandomBytes(length: number): Uint8Array {\n    const array = new Uint8Array(length);\n    return getCrypto().getRandomValues(array);\n  },\n  async getRandomBytesAsync(length: number): Promise<Uint8Array> {\n    const array = new Uint8Array(length);\n    return getCrypto().getRandomValues(array);\n  },\n  getRandomValues(typedArray: TypedArray) {\n    return getCrypto().getRandomValues(typedArray);\n  },\n  randomUUID() {\n    return getCrypto().randomUUID();\n  },\n  digestAsync(algorithm: AlgorithmIdentifier, data: ArrayBuffer): Promise<ArrayBuffer> {\n    return getCrypto().subtle.digest(algorithm, data);\n  },\n};\n\nfunction hexString(buffer: ArrayBuffer): string {\n  const byteArray = new Uint8Array(buffer);\n\n  const hexCodes = [...byteArray].map((value) => {\n    const hexCode = value.toString(16);\n    const paddedHexCode = hexCode.padStart(2, '0');\n    return paddedHexCode;\n  });\n\n  return hexCodes.join('');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}