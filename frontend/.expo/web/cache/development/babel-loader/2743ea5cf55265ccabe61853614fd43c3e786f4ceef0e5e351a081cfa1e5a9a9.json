{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform, CodedError, UnavailabilityError } from '@unimodules/core';\nimport * as Application from 'expo-application';\nimport Constants from 'expo-constants';\nimport { setAutoServerRegistrationEnabledAsync } from \"./DevicePushTokenAutoRegistration.fx\";\nimport ServerRegistrationModule from \"./ServerRegistrationModule\";\nimport getDevicePushTokenAsync from \"./getDevicePushTokenAsync\";\nvar productionBaseUrl = 'https://exp.host/--/api/v2/';\nexport default function getExpoPushTokenAsync() {\n  var _Constants$manifest, _Constants$manifest2, _options$baseUrl, _options$url;\n  var options,\n    devicePushToken,\n    deviceId,\n    experienceId,\n    applicationId,\n    type,\n    development,\n    baseUrl,\n    url,\n    body,\n    response,\n    statusInfo,\n    _body,\n    expoPushToken,\n    _args = arguments;\n  return _regeneratorRuntime.async(function getExpoPushTokenAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n        _context.t0 = options.devicePushToken;\n        if (_context.t0) {\n          _context.next = 6;\n          break;\n        }\n        _context.next = 5;\n        return _regeneratorRuntime.awrap(getDevicePushTokenAsync());\n      case 5:\n        _context.t0 = _context.sent;\n      case 6:\n        devicePushToken = _context.t0;\n        _context.t1 = options.deviceId;\n        if (_context.t1) {\n          _context.next = 12;\n          break;\n        }\n        _context.next = 11;\n        return _regeneratorRuntime.awrap(getDeviceIdAsync());\n      case 11:\n        _context.t1 = _context.sent;\n      case 12:\n        deviceId = _context.t1;\n        experienceId = options.experienceId || ((_Constants$manifest = Constants.manifest) == null ? void 0 : _Constants$manifest.originalFullName) || ((_Constants$manifest2 = Constants.manifest) == null ? void 0 : _Constants$manifest2.id);\n        if (experienceId) {\n          _context.next = 16;\n          break;\n        }\n        throw new CodedError('ERR_NOTIFICATIONS_NO_EXPERIENCE_ID', \"No experienceId found. If it can't be inferred from the manifest (eg. in bare workflow), you have to pass it in yourself.\");\n      case 16:\n        applicationId = options.applicationId || Application.applicationId;\n        if (applicationId) {\n          _context.next = 19;\n          break;\n        }\n        throw new CodedError('ERR_NOTIFICATIONS_NO_APPLICATION_ID', \"No applicationId found. If it can't be inferred from native configuration by expo-application, you have to pass it in yourself.\");\n      case 19:\n        type = options.type || getTypeOfToken(devicePushToken);\n        _context.t2 = options.development;\n        if (_context.t2) {\n          _context.next = 25;\n          break;\n        }\n        _context.next = 24;\n        return _regeneratorRuntime.awrap(shouldUseDevelopmentNotificationService());\n      case 24:\n        _context.t2 = _context.sent;\n      case 25:\n        development = _context.t2;\n        baseUrl = (_options$baseUrl = options.baseUrl) != null ? _options$baseUrl : productionBaseUrl;\n        url = (_options$url = options.url) != null ? _options$url : baseUrl + \"push/getExpoPushToken\";\n        body = {\n          type: type,\n          deviceId: deviceId,\n          development: development,\n          experienceId: experienceId,\n          appId: applicationId,\n          deviceToken: getDeviceToken(devicePushToken)\n        };\n        _context.next = 31;\n        return _regeneratorRuntime.awrap(fetch(url, {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify(body)\n        }).catch(function (error) {\n          throw new CodedError('ERR_NOTIFICATIONS_NETWORK_ERROR', \"Error encountered while fetching Expo token: \" + error + \".\");\n        }));\n      case 31:\n        response = _context.sent;\n        if (response.ok) {\n          _context.next = 44;\n          break;\n        }\n        statusInfo = response.statusText || response.status;\n        _body = undefined;\n        _context.prev = 35;\n        _context.next = 38;\n        return _regeneratorRuntime.awrap(response.text());\n      case 38:\n        _body = _context.sent;\n        _context.next = 43;\n        break;\n      case 41:\n        _context.prev = 41;\n        _context.t3 = _context[\"catch\"](35);\n      case 43:\n        throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Error encountered while fetching Expo token, expected an OK response, received: \" + statusInfo + \" (body: \\\"\" + _body + \"\\\").\");\n      case 44:\n        _context.t4 = getExpoPushToken;\n        _context.next = 47;\n        return _regeneratorRuntime.awrap(parseResponse(response));\n      case 47:\n        _context.t5 = _context.sent;\n        expoPushToken = (0, _context.t4)(_context.t5);\n        _context.prev = 49;\n        if (!(options.url || options.baseUrl)) {\n          _context.next = 54;\n          break;\n        }\n        console.debug(\"[expo-notifications] Since the URL endpoint to register in has been customized in the options, expo-notifications won't try to auto-update the device push token on the server.\");\n        _context.next = 56;\n        break;\n      case 54:\n        _context.next = 56;\n        return _regeneratorRuntime.awrap(setAutoServerRegistrationEnabledAsync(true));\n      case 56:\n        _context.next = 61;\n        break;\n      case 58:\n        _context.prev = 58;\n        _context.t6 = _context[\"catch\"](49);\n        console.warn('[expo-notifications] Could not enable automatically registering new device tokens with the Expo notification service', _context.t6);\n      case 61:\n        return _context.abrupt(\"return\", {\n          type: 'expo',\n          data: expoPushToken\n        });\n      case 62:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, [[35, 41], [49, 58]], Promise);\n}\nfunction parseResponse(response) {\n  return _regeneratorRuntime.async(function parseResponse$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.prev = 0;\n        _context2.next = 3;\n        return _regeneratorRuntime.awrap(response.json());\n      case 3:\n        return _context2.abrupt(\"return\", _context2.sent);\n      case 6:\n        _context2.prev = 6;\n        _context2.t0 = _context2[\"catch\"](0);\n        _context2.prev = 8;\n        _context2.t1 = CodedError;\n        _context2.t2 = JSON;\n        _context2.next = 13;\n        return _regeneratorRuntime.awrap(response.text());\n      case 13:\n        _context2.t3 = _context2.sent;\n        _context2.t4 = _context2.t2.stringify.call(_context2.t2, _context2.t3);\n        _context2.t5 = \"Expected a JSON response from server when fetching Expo token, received body: \" + _context2.t4;\n        _context2.t6 = _context2.t5 + \".\";\n        throw new _context2.t1('ERR_NOTIFICATIONS_SERVER_ERROR', _context2.t6);\n      case 20:\n        _context2.prev = 20;\n        _context2.t7 = _context2[\"catch\"](8);\n        throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Expected a JSON response from server when fetching Expo token, received response: \" + JSON.stringify(response) + \".\");\n      case 23:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, [[0, 6], [8, 20]], Promise);\n}\nfunction getExpoPushToken(data) {\n  if (!data || !(typeof data === 'object') || !data.data || !(typeof data.data === 'object') || !data.data.expoPushToken || !(typeof data.data.expoPushToken === 'string')) {\n    throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Malformed response from server, expected \\\"{ data: { expoPushToken: string } }\\\", received: \" + JSON.stringify(data, null, 2) + \".\");\n  }\n  return data.data.expoPushToken;\n}\nfunction getDeviceIdAsync() {\n  return _regeneratorRuntime.async(function getDeviceIdAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.prev = 0;\n        if (ServerRegistrationModule.getInstallationIdAsync) {\n          _context3.next = 3;\n          break;\n        }\n        throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n      case 3:\n        _context3.next = 5;\n        return _regeneratorRuntime.awrap(ServerRegistrationModule.getInstallationIdAsync());\n      case 5:\n        return _context3.abrupt(\"return\", _context3.sent);\n      case 8:\n        _context3.prev = 8;\n        _context3.t0 = _context3[\"catch\"](0);\n        throw new CodedError('ERR_NOTIF_DEVICE_ID', \"Could not have fetched installation ID of the application: \" + _context3.t0 + \".\");\n      case 11:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, [[0, 8]], Promise);\n}\nfunction getDeviceToken(devicePushToken) {\n  if (typeof devicePushToken.data === 'string') {\n    return devicePushToken.data;\n  }\n  return JSON.stringify(devicePushToken.data);\n}\nfunction shouldUseDevelopmentNotificationService() {\n  var notificationServiceEnvironment;\n  return _regeneratorRuntime.async(function shouldUseDevelopmentNotificationService$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        if (!(Platform.OS === 'ios')) {\n          _context4.next = 11;\n          break;\n        }\n        _context4.prev = 1;\n        _context4.next = 4;\n        return _regeneratorRuntime.awrap(Application.getIosPushNotificationServiceEnvironmentAsync());\n      case 4:\n        notificationServiceEnvironment = _context4.sent;\n        if (!(notificationServiceEnvironment === 'development')) {\n          _context4.next = 7;\n          break;\n        }\n        return _context4.abrupt(\"return\", true);\n      case 7:\n        _context4.next = 11;\n        break;\n      case 9:\n        _context4.prev = 9;\n        _context4.t0 = _context4[\"catch\"](1);\n      case 11:\n        return _context4.abrupt(\"return\", false);\n      case 12:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, null, null, [[1, 9]], Promise);\n}\nfunction getTypeOfToken(devicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    default:\n      return devicePushToken.type;\n  }\n}","map":{"version":3,"names":["Platform","CodedError","UnavailabilityError","Application","Constants","setAutoServerRegistrationEnabledAsync","ServerRegistrationModule","getDevicePushTokenAsync","productionBaseUrl","getExpoPushTokenAsync","_Constants$manifest","_Constants$manifest2","_options$baseUrl","_options$url","options","devicePushToken","deviceId","experienceId","applicationId","type","development","baseUrl","url","body","response","statusInfo","_body","expoPushToken","_args","arguments","_regeneratorRuntime","async","getExpoPushTokenAsync$","_context","prev","next","length","undefined","t0","awrap","sent","t1","getDeviceIdAsync","manifest","originalFullName","id","getTypeOfToken","t2","shouldUseDevelopmentNotificationService","appId","deviceToken","getDeviceToken","fetch","method","headers","JSON","stringify","catch","error","ok","statusText","status","text","t3","t4","getExpoPushToken","parseResponse","t5","console","debug","t6","warn","abrupt","data","stop","Promise","parseResponse$","_context2","json","call","t7","getDeviceIdAsync$","_context3","getInstallationIdAsync","notificationServiceEnvironment","shouldUseDevelopmentNotificationService$","_context4","OS","getIosPushNotificationServiceEnvironmentAsync"],"sources":["C:\\Users\\alexd\\Documents\\InstagramClone\\frontend\\node_modules\\expo-notifications\\src\\getExpoPushTokenAsync.ts"],"sourcesContent":["import { Platform, CodedError, UnavailabilityError } from '@unimodules/core';\nimport * as Application from 'expo-application';\nimport Constants from 'expo-constants';\n\nimport { setAutoServerRegistrationEnabledAsync } from './DevicePushTokenAutoRegistration.fx';\nimport ServerRegistrationModule from './ServerRegistrationModule';\nimport { DevicePushToken, ExpoPushToken } from './Tokens.types';\nimport getDevicePushTokenAsync from './getDevicePushTokenAsync';\n\nconst productionBaseUrl = 'https://exp.host/--/api/v2/';\n\ninterface Options {\n  // Endpoint URL override\n  baseUrl?: string;\n\n  // Request URL override\n  url?: string;\n\n  // Request body overrides\n  type?: string;\n  deviceId?: string;\n  development?: boolean;\n  experienceId?: string;\n  applicationId?: string;\n  devicePushToken?: DevicePushToken;\n}\n\nexport default async function getExpoPushTokenAsync(options: Options = {}): Promise<ExpoPushToken> {\n  const devicePushToken = options.devicePushToken || (await getDevicePushTokenAsync());\n\n  const deviceId = options.deviceId || (await getDeviceIdAsync());\n\n  const experienceId =\n    options.experienceId || Constants.manifest?.originalFullName || Constants.manifest?.id;\n\n  if (!experienceId) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NO_EXPERIENCE_ID',\n      \"No experienceId found. If it can't be inferred from the manifest (eg. in bare workflow), you have to pass it in yourself.\"\n    );\n  }\n\n  const applicationId = options.applicationId || Application.applicationId;\n  if (!applicationId) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NO_APPLICATION_ID',\n      \"No applicationId found. If it can't be inferred from native configuration by expo-application, you have to pass it in yourself.\"\n    );\n  }\n  const type = options.type || getTypeOfToken(devicePushToken);\n  const development = options.development || (await shouldUseDevelopmentNotificationService());\n\n  const baseUrl = options.baseUrl ?? productionBaseUrl;\n  const url = options.url ?? `${baseUrl}push/getExpoPushToken`;\n\n  const body = {\n    type,\n    deviceId,\n    development,\n    experienceId,\n    appId: applicationId,\n    deviceToken: getDeviceToken(devicePushToken),\n  };\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify(body),\n  }).catch(error => {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NETWORK_ERROR',\n      `Error encountered while fetching Expo token: ${error}.`\n    );\n  });\n\n  if (!response.ok) {\n    const statusInfo = response.statusText || response.status;\n    let body: string | undefined = undefined;\n    try {\n      body = await response.text();\n    } catch (error) {\n      // do nothing\n    }\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_SERVER_ERROR',\n      `Error encountered while fetching Expo token, expected an OK response, received: ${statusInfo} (body: \"${body}\").`\n    );\n  }\n\n  const expoPushToken = getExpoPushToken(await parseResponse(response));\n\n  try {\n    if (options.url || options.baseUrl) {\n      console.debug(\n        `[expo-notifications] Since the URL endpoint to register in has been customized in the options, expo-notifications won't try to auto-update the device push token on the server.`\n      );\n    } else {\n      await setAutoServerRegistrationEnabledAsync(true);\n    }\n  } catch (e) {\n    console.warn(\n      '[expo-notifications] Could not enable automatically registering new device tokens with the Expo notification service',\n      e\n    );\n  }\n\n  return {\n    type: 'expo',\n    data: expoPushToken,\n  };\n}\n\nasync function parseResponse(response: Response) {\n  try {\n    return await response.json();\n  } catch (error) {\n    try {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_SERVER_ERROR',\n        `Expected a JSON response from server when fetching Expo token, received body: ${JSON.stringify(\n          await response.text()\n        )}.`\n      );\n    } catch (innerError) {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_SERVER_ERROR',\n        `Expected a JSON response from server when fetching Expo token, received response: ${JSON.stringify(\n          response\n        )}.`\n      );\n    }\n  }\n}\n\nfunction getExpoPushToken(data: any) {\n  if (\n    !data ||\n    !(typeof data === 'object') ||\n    !data.data ||\n    !(typeof data.data === 'object') ||\n    !data.data.expoPushToken ||\n    !(typeof data.data.expoPushToken === 'string')\n  ) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_SERVER_ERROR',\n      `Malformed response from server, expected \"{ data: { expoPushToken: string } }\", received: ${JSON.stringify(\n        data,\n        null,\n        2\n      )}.`\n    );\n  }\n\n  return data.data.expoPushToken as string;\n}\n\n// Same as in DevicePushTokenAutoRegistration\nasync function getDeviceIdAsync() {\n  try {\n    if (!ServerRegistrationModule.getInstallationIdAsync) {\n      throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n    }\n\n    return await ServerRegistrationModule.getInstallationIdAsync();\n  } catch (e) {\n    throw new CodedError(\n      'ERR_NOTIF_DEVICE_ID',\n      `Could not have fetched installation ID of the application: ${e}.`\n    );\n  }\n}\n\nfunction getDeviceToken(devicePushToken: DevicePushToken) {\n  if (typeof devicePushToken.data === 'string') {\n    return devicePushToken.data;\n  }\n\n  return JSON.stringify(devicePushToken.data);\n}\n\n// Same as in DevicePushTokenAutoRegistration\nasync function shouldUseDevelopmentNotificationService() {\n  if (Platform.OS === 'ios') {\n    try {\n      const notificationServiceEnvironment = await Application.getIosPushNotificationServiceEnvironmentAsync();\n      if (notificationServiceEnvironment === 'development') {\n        return true;\n      }\n    } catch (e) {\n      // We can't do anything here, we'll fallback to false then.\n    }\n  }\n\n  return false;\n}\n\n// Same as in DevicePushTokenAutoRegistration\nfunction getTypeOfToken(devicePushToken: DevicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    // This probably will error on server, but let's make this function future-safe.\n    default:\n      return devicePushToken.type;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}