{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport * as Notifications from 'expo-notifications';\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { reload } from \"../redux/actions/index\";\nimport CameraScreen from \"./main/add/Camera\";\nimport ChatListScreen from \"./main/chat/List\";\nimport FeedScreen from \"./main/post/Feed\";\nimport ProfileScreen from \"./main/profile/Profile\";\nimport SearchScreen from \"./main/profile/Search\";\nimport { getAuth } from 'firebase/auth';\nvar Tab = createMaterialBottomTabNavigator();\nfunction Main(props) {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    unreadChats = _useState2[0],\n    setUnreadChats = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    lastNot = _useState4[0],\n    setLastNot = _useState4[1];\n  var lastNotificationResponse = Notifications.useLastNotificationResponse();\n  var auth = getAuth();\n  if (lastNotificationResponse != null && lastNotificationResponse !== lastNot) {\n    setLastNot(lastNotificationResponse);\n    var data = lastNotificationResponse.notification.request.content.data;\n    switch (data.type) {\n      case 0:\n        props.navigation.navigate(\"Post\", {\n          item: data.postId,\n          user: data.user,\n          notification: true\n        });\n        break;\n      case 1:\n        props.navigation.navigate(\"Chat\", {\n          user: data.user,\n          notification: true\n        });\n        break;\n      case 2:\n        props.navigation.navigate(\"ProfileOther\", {\n          uid: data.user,\n          username: undefined,\n          notification: true\n        });\n        break;\n    }\n  }\n  useEffect(function () {\n    props.reload();\n    var notificationListener = Notifications.addNotificationResponseReceivedListener(function (notification) {\n      var data = notification.notification.request.content.data;\n      switch (data.type) {\n        case \"post\":\n          props.navigation.navigate(\"Post\", {\n            item: data.postId,\n            user: data.user,\n            notification: true\n          });\n          break;\n        case \"chat\":\n          props.navigation.navigate(\"Chat\", {\n            user: data.user,\n            notification: true\n          });\n          break;\n        case \"profile\":\n          props.navigation.navigate(\"ProfileOther\", {\n            uid: data.user,\n            username: undefined,\n            notification: true\n          });\n          break;\n      }\n    });\n    return function () {\n      notificationListener.remove();\n    };\n  }, []);\n  useEffect(function () {\n    if (props.currentUser != null) {\n      if (props.currentUser.banned) {\n        props.navigation.navigate(\"Blocked\");\n      }\n    }\n    setUnreadChats(false);\n    for (var i = 0; i < props.chats.length; i++) {\n      var _auth$currentUser;\n      if (!props.chats[i][(_auth$currentUser = auth.currentUser) == null ? void 0 : _auth$currentUser.uid]) {\n        setUnreadChats(true);\n      }\n    }\n  }, [props.currentUser, props.chats]);\n  if (props.currentUser == null) {\n    return React.createElement(View, null);\n  }\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'white'\n    }\n  }, React.createElement(Tab.Navigator, {\n    initialRouteName: \"Feed\",\n    labeled: false,\n    tabBarOptions: {\n      showIcon: true,\n      showLabel: false,\n      indicatorStyle: {\n        opacity: 0\n      }\n    },\n    barStyle: {\n      backgroundColor: '#ffffff'\n    }\n  }, React.createElement(Tab.Screen, {\n    key: Date.now(),\n    name: \"Feed\",\n    component: FeedScreen,\n    options: {\n      tabBarIcon: function tabBarIcon(_ref) {\n        var color = _ref.color,\n          size = _ref.size;\n        return React.createElement(MaterialCommunityIcons, {\n          name: \"home\",\n          color: color,\n          size: 26\n        });\n      }\n    }\n  }), React.createElement(Tab.Screen, {\n    key: Date.now(),\n    name: \"Search\",\n    component: SearchScreen,\n    navigation: props.navigation,\n    options: {\n      tabBarLabel: 'Search',\n      tabBarIcon: function tabBarIcon(_ref2) {\n        var color = _ref2.color,\n          size = _ref2.size;\n        return React.createElement(MaterialCommunityIcons, {\n          name: \"magnify\",\n          color: color,\n          size: 26\n        });\n      }\n    }\n  }), React.createElement(Tab.Screen, {\n    key: Date.now(),\n    name: \"Camera\",\n    component: CameraScreen,\n    navigation: props.navigation,\n    options: {\n      tabBarIcon: function tabBarIcon(_ref3) {\n        var color = _ref3.color,\n          size = _ref3.size;\n        return React.createElement(MaterialCommunityIcons, {\n          name: \"camera\",\n          color: color,\n          size: 26\n        });\n      }\n    }\n  }), React.createElement(Tab.Screen, {\n    key: Date.now(),\n    name: \"chat\",\n    component: ChatListScreen,\n    navigation: props.navigation,\n    options: {\n      tabBarIcon: function tabBarIcon(_ref4) {\n        var color = _ref4.color,\n          size = _ref4.size;\n        return React.createElement(View, null, unreadChats && React.createElement(View, {\n          style: {\n            backgroundColor: 'red',\n            width: 10,\n            height: 10,\n            position: 'absolute',\n            right: 0,\n            borderRadius: 100\n          }\n        }), React.createElement(MaterialCommunityIcons, {\n          name: \"chat\",\n          color: color,\n          size: 26\n        }));\n      }\n    }\n  }), React.createElement(Tab.Screen, {\n    name: \"Profile\",\n    component: ProfileScreen,\n    navigation: props.navigation,\n    listeners: function listeners(_ref5) {\n      var navigation = _ref5.navigation;\n      return {\n        tabPress: function tabPress(event) {\n          var _auth$currentUser2;\n          event.preventDefault();\n          navigation.navigate(\"Profile\", {\n            uid: (_auth$currentUser2 = auth.currentUser) == null ? void 0 : _auth$currentUser2.uid\n          });\n        }\n      };\n    },\n    options: {\n      tabBarIcon: function tabBarIcon(_ref6) {\n        var color = _ref6.color,\n          size = _ref6.size;\n        return React.createElement(MaterialCommunityIcons, {\n          name: \"account-circle\",\n          color: color,\n          size: 26\n        });\n      }\n    }\n  })));\n}\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    currentUser: store.userState.currentUser,\n    chats: store.userState.chats,\n    friendsRequestsReceived: store.userState.friendsRequestsReceived\n  };\n};\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    reload: reload\n  }, dispatch);\n};\nexport default connect(mapStateToProps, mapDispatchProps)(Main);","map":{"version":3,"names":["createMaterialBottomTabNavigator","Notifications","React","useEffect","useState","View","MaterialCommunityIcons","connect","bindActionCreators","reload","CameraScreen","ChatListScreen","FeedScreen","ProfileScreen","SearchScreen","getAuth","Tab","Main","props","_useState","_useState2","_slicedToArray","unreadChats","setUnreadChats","_useState3","_useState4","lastNot","setLastNot","lastNotificationResponse","useLastNotificationResponse","auth","data","notification","request","content","type","navigation","navigate","item","postId","user","uid","username","undefined","notificationListener","addNotificationResponseReceivedListener","remove","currentUser","banned","i","chats","length","_auth$currentUser","createElement","style","flex","backgroundColor","Navigator","initialRouteName","labeled","tabBarOptions","showIcon","showLabel","indicatorStyle","opacity","barStyle","Screen","key","Date","now","name","component","options","tabBarIcon","_ref","color","size","tabBarLabel","_ref2","_ref3","_ref4","width","height","position","right","borderRadius","listeners","_ref5","tabPress","event","_auth$currentUser2","preventDefault","_ref6","mapStateToProps","store","userState","friendsRequestsReceived","mapDispatchProps","dispatch"],"sources":["C:/Users/alexd/Documents/InstagramClone/frontend/components/Main.js"],"sourcesContent":["import { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\r\nimport * as Notifications from 'expo-notifications';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { View } from 'react-native';\r\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { reload } from '../redux/actions/index';\r\nimport CameraScreen from './main/add/Camera';\r\nimport ChatListScreen from './main/chat/List';\r\nimport FeedScreen from './main/post/Feed';\r\nimport ProfileScreen from './main/profile/Profile';\r\nimport SearchScreen from './main/profile/Search';\r\nimport { getAuth } from 'firebase/auth';\r\n\r\nconst Tab = createMaterialBottomTabNavigator();\r\n\r\nfunction Main(props) {\r\n    const [unreadChats, setUnreadChats] = useState(false);\r\n    const [lastNot, setLastNot] = useState(false);\r\n\r\n    const lastNotificationResponse = Notifications.useLastNotificationResponse();\r\n    const auth = getAuth(); // Initialize Firebase Authentication\r\n\r\n    if (lastNotificationResponse != null && lastNotificationResponse !== lastNot) {\r\n        setLastNot(lastNotificationResponse);\r\n        const data = lastNotificationResponse.notification.request.content.data;\r\n        switch (data.type) {\r\n            case 0:\r\n                props.navigation.navigate(\"Post\", { item: data.postId, user: data.user, notification: true });\r\n                break;\r\n            case 1:\r\n                props.navigation.navigate(\"Chat\", { user: data.user, notification: true });\r\n                break;\r\n            case 2:\r\n                props.navigation.navigate(\"ProfileOther\", { uid: data.user, username: undefined, notification: true });\r\n                break;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.reload();\r\n        const notificationListener = Notifications.addNotificationResponseReceivedListener((notification) => {\r\n            const data = notification.notification.request.content.data;\r\n            switch (data.type) {\r\n                case \"post\":\r\n                    props.navigation.navigate(\"Post\", { item: data.postId, user: data.user, notification: true });\r\n                    break;\r\n                case \"chat\":\r\n                    props.navigation.navigate(\"Chat\", { user: data.user, notification: true });\r\n                    break;\r\n                case \"profile\":\r\n                    props.navigation.navigate(\"ProfileOther\", { uid: data.user, username: undefined, notification: true });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            notificationListener.remove(); // Cleanup notification listener\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (props.currentUser != null) {\r\n            if (props.currentUser.banned) {\r\n                props.navigation.navigate(\"Blocked\");\r\n            }\r\n        }\r\n        setUnreadChats(false);\r\n        for (let i = 0; i < props.chats.length; i++) {\r\n            if (!props.chats[i][auth.currentUser?.uid]) {\r\n                setUnreadChats(true);\r\n            }\r\n        }\r\n    }, [props.currentUser, props.chats]);\r\n\r\n    if (props.currentUser == null) {\r\n        return <View></View>;\r\n    }\r\n\r\n    return (\r\n        <View style={{ flex: 1, backgroundColor: 'white' }}>\r\n            <Tab.Navigator\r\n                initialRouteName=\"Feed\"\r\n                labeled={false}\r\n                tabBarOptions={{\r\n                    showIcon: true,\r\n                    showLabel: false,\r\n                    indicatorStyle: {\r\n                        opacity: 0,\r\n                    },\r\n                }}\r\n                barStyle={{ backgroundColor: '#ffffff' }}\r\n            >\r\n                <Tab.Screen\r\n                    key={Date.now()}\r\n                    name=\"Feed\"\r\n                    component={FeedScreen}\r\n                    options={{\r\n                        tabBarIcon: ({ color, size }) => (\r\n                            <MaterialCommunityIcons name=\"home\" color={color} size={26} />\r\n                        ),\r\n                    }}\r\n                />\r\n                <Tab.Screen\r\n                    key={Date.now()}\r\n                    name=\"Search\"\r\n                    component={SearchScreen}\r\n                    navigation={props.navigation}\r\n                    options={{\r\n                        tabBarLabel: 'Search',\r\n                        tabBarIcon: ({ color, size }) => (\r\n                            <MaterialCommunityIcons name=\"magnify\" color={color} size={26} />\r\n                        ),\r\n                    }}\r\n                />\r\n                <Tab.Screen\r\n                    key={Date.now()}\r\n                    name=\"Camera\"\r\n                    component={CameraScreen}\r\n                    navigation={props.navigation}\r\n                    options={{\r\n                        tabBarIcon: ({ color, size }) => (\r\n                            <MaterialCommunityIcons name=\"camera\" color={color} size={26} />\r\n                        ),\r\n                    }}\r\n                />\r\n                <Tab.Screen\r\n                    key={Date.now()}\r\n                    name=\"chat\"\r\n                    component={ChatListScreen}\r\n                    navigation={props.navigation}\r\n                    options={{\r\n                        tabBarIcon: ({ color, size }) => (\r\n                            <View>\r\n                                {unreadChats && (\r\n                                    <View\r\n                                        style={{\r\n                                            backgroundColor: 'red',\r\n                                            width: 10,\r\n                                            height: 10,\r\n                                            position: 'absolute',\r\n                                            right: 0,\r\n                                            borderRadius: 100,\r\n                                        }}\r\n                                    ></View>\r\n                                )}\r\n                                <MaterialCommunityIcons name=\"chat\" color={color} size={26} />\r\n                            </View>\r\n                        ),\r\n                    }}\r\n                />\r\n                <Tab.Screen\r\n                    name=\"Profile\"\r\n                    component={ProfileScreen}\r\n                    navigation={props.navigation}\r\n                    listeners={({ navigation }) => ({\r\n                        tabPress: (event) => {\r\n                            event.preventDefault();\r\n                            navigation.navigate(\"Profile\", { uid: auth.currentUser?.uid });\r\n                        },\r\n                    })}\r\n                    options={{\r\n                        tabBarIcon: ({ color, size }) => (\r\n                            <MaterialCommunityIcons name=\"account-circle\" color={color} size={26} />\r\n                        ),\r\n                    }}\r\n                />\r\n            </Tab.Navigator>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (store) => ({\r\n    currentUser: store.userState.currentUser,\r\n    chats: store.userState.chats,\r\n    friendsRequestsReceived: store.userState.friendsRequestsReceived,\r\n});\r\nconst mapDispatchProps = (dispatch) => bindActionCreators({ reload }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(Main);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}