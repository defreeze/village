{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport ExponentAV from \"./ExponentAV\";\nexport * from \"./Audio/Recording\";\nexport * from \"./Audio/Sound\";\nexport { setIsEnabledAsync } from \"./Audio/AudioAvailability\";\nexport { PitchCorrectionQuality } from \"./AV\";\nexport var INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = 0;\nexport var INTERRUPTION_MODE_IOS_DO_NOT_MIX = 1;\nexport var INTERRUPTION_MODE_IOS_DUCK_OTHERS = 2;\nexport var INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = 1;\nexport var INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = 2;\nvar _isValueValid = function _isValueValid(value, validValues) {\n  return validValues.filter(function (validValue) {\n    return validValue === value;\n  }).length > 0;\n};\nvar _populateMissingKeys = function _populateMissingKeys(userAudioMode, defaultAudioMode) {\n  for (var key in defaultAudioMode) {\n    if (!userAudioMode.hasOwnProperty(key)) {\n      userAudioMode[key] = defaultAudioMode[key];\n    }\n  }\n  return userAudioMode;\n};\nvar defaultMode = {\n  allowsRecordingIOS: false,\n  interruptionModeIOS: INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,\n  playsInSilentModeIOS: false,\n  staysActiveInBackground: false,\n  interruptionModeAndroid: INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n  shouldDuckAndroid: true,\n  playThroughEarpieceAndroid: false\n};\nvar currentAudioMode = null;\nfunction getCurrentAudioMode() {\n  if (!currentAudioMode) {\n    return defaultMode;\n  }\n  return currentAudioMode;\n}\nexport function setAudioModeAsync(partialMode) {\n  var mode;\n  return _regeneratorRuntime.async(function setAudioModeAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        mode = _populateMissingKeys(partialMode, getCurrentAudioMode());\n        if (_isValueValid(mode.interruptionModeIOS, [INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS, INTERRUPTION_MODE_IOS_DO_NOT_MIX, INTERRUPTION_MODE_IOS_DUCK_OTHERS])) {\n          _context.next = 3;\n          break;\n        }\n        throw new Error(\"\\\"interruptionModeIOS\\\" was set to an invalid value.\");\n      case 3:\n        if (_isValueValid(mode.interruptionModeAndroid, [INTERRUPTION_MODE_ANDROID_DO_NOT_MIX, INTERRUPTION_MODE_ANDROID_DUCK_OTHERS])) {\n          _context.next = 5;\n          break;\n        }\n        throw new Error(\"\\\"interruptionModeAndroid\\\" was set to an invalid value.\");\n      case 5:\n        if (!(typeof mode.allowsRecordingIOS !== 'boolean' || typeof mode.playsInSilentModeIOS !== 'boolean' || typeof mode.staysActiveInBackground !== 'boolean' || typeof mode.shouldDuckAndroid !== 'boolean' || typeof mode.playThroughEarpieceAndroid !== 'boolean')) {\n          _context.next = 7;\n          break;\n        }\n        throw new Error('\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.');\n      case 7:\n        currentAudioMode = mode;\n        _context.next = 10;\n        return _regeneratorRuntime.awrap(ExponentAV.setAudioMode(mode));\n      case 10:\n        return _context.abrupt(\"return\", _context.sent);\n      case 11:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["ExponentAV","setIsEnabledAsync","PitchCorrectionQuality","INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS","INTERRUPTION_MODE_IOS_DO_NOT_MIX","INTERRUPTION_MODE_IOS_DUCK_OTHERS","INTERRUPTION_MODE_ANDROID_DO_NOT_MIX","INTERRUPTION_MODE_ANDROID_DUCK_OTHERS","_isValueValid","value","validValues","filter","validValue","length","_populateMissingKeys","userAudioMode","defaultAudioMode","key","hasOwnProperty","defaultMode","allowsRecordingIOS","interruptionModeIOS","playsInSilentModeIOS","staysActiveInBackground","interruptionModeAndroid","shouldDuckAndroid","playThroughEarpieceAndroid","currentAudioMode","getCurrentAudioMode","setAudioModeAsync","partialMode","mode","_regeneratorRuntime","async","setAudioModeAsync$","_context","prev","next","Error","awrap","setAudioMode","abrupt","sent","stop","Promise"],"sources":["C:\\Users\\alexd\\Documents\\InstagramClone\\frontend\\node_modules\\expo-av\\src\\Audio.ts"],"sourcesContent":["import ExponentAV from './ExponentAV';\n\nexport * from './Audio/Recording';\nexport * from './Audio/Sound';\nexport { setIsEnabledAsync } from './Audio/AudioAvailability';\nexport { PitchCorrectionQuality } from './AV';\n\nexport type AudioMode = {\n  allowsRecordingIOS: boolean;\n  interruptionModeIOS: number;\n  playsInSilentModeIOS: boolean;\n  staysActiveInBackground: boolean;\n  interruptionModeAndroid: number;\n  shouldDuckAndroid: boolean;\n  playThroughEarpieceAndroid: boolean;\n};\n\nexport const INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = 0;\nexport const INTERRUPTION_MODE_IOS_DO_NOT_MIX = 1;\nexport const INTERRUPTION_MODE_IOS_DUCK_OTHERS = 2;\n\nexport const INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = 1;\nexport const INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = 2;\n\n// Returns true if value is in validValues, and false if not.\nconst _isValueValid = (value: any, validValues: any[]): boolean => {\n  return validValues.filter(validValue => validValue === value).length > 0;\n};\n\nconst _populateMissingKeys = (\n  userAudioMode: Partial<AudioMode>,\n  defaultAudioMode: AudioMode\n): AudioMode => {\n  for (const key in defaultAudioMode) {\n    if (!userAudioMode.hasOwnProperty(key)) {\n      userAudioMode[key] = defaultAudioMode[key];\n    }\n  }\n  return userAudioMode as AudioMode;\n};\n\nconst defaultMode: AudioMode = {\n  allowsRecordingIOS: false,\n  interruptionModeIOS: INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,\n  playsInSilentModeIOS: false,\n  staysActiveInBackground: false,\n  interruptionModeAndroid: INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n  shouldDuckAndroid: true,\n  playThroughEarpieceAndroid: false,\n};\n\nlet currentAudioMode: AudioMode | null = null;\n\nfunction getCurrentAudioMode(): AudioMode {\n  if (!currentAudioMode) {\n    return defaultMode;\n  }\n  return currentAudioMode;\n}\n\nexport async function setAudioModeAsync(partialMode: Partial<AudioMode>): Promise<void> {\n  const mode = _populateMissingKeys(partialMode, getCurrentAudioMode());\n\n  if (\n    !_isValueValid(mode.interruptionModeIOS, [\n      INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,\n      INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n      INTERRUPTION_MODE_IOS_DUCK_OTHERS,\n    ])\n  ) {\n    throw new Error(`\"interruptionModeIOS\" was set to an invalid value.`);\n  }\n  if (\n    !_isValueValid(mode.interruptionModeAndroid, [\n      INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\n      INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n    ])\n  ) {\n    throw new Error(`\"interruptionModeAndroid\" was set to an invalid value.`);\n  }\n  if (\n    typeof mode.allowsRecordingIOS !== 'boolean' ||\n    typeof mode.playsInSilentModeIOS !== 'boolean' ||\n    typeof mode.staysActiveInBackground !== 'boolean' ||\n    typeof mode.shouldDuckAndroid !== 'boolean' ||\n    typeof mode.playThroughEarpieceAndroid !== 'boolean'\n  ) {\n    throw new Error(\n      '\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.'\n    );\n  }\n  currentAudioMode = mode;\n  return await ExponentAV.setAudioMode(mode);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}