{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar lastSetBadgeCount = 0;\nvar badgeModule = {\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {},\n  getBadgeCountAsync: function getBadgeCountAsync() {\n    return _regeneratorRuntime.async(function getBadgeCountAsync$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", lastSetBadgeCount);\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }, null, null, null, Promise);\n  },\n  setBadgeCountAsync: function setBadgeCountAsync(badgeCount, options) {\n    var badgin;\n    return _regeneratorRuntime.async(function setBadgeCountAsync$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(typeof window === 'undefined')) {\n            _context2.next = 2;\n            break;\n          }\n          return _context2.abrupt(\"return\", false);\n        case 2:\n          badgin = require('badgin');\n          if (badgeCount > 0) {\n            badgin.set(badgeCount, options);\n          } else {\n            badgin.clear();\n          }\n          lastSetBadgeCount = badgeCount;\n          return _context2.abrupt(\"return\", true);\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, null, null, null, Promise);\n  }\n};\nexport default badgeModule;","map":{"version":3,"names":["lastSetBadgeCount","badgeModule","addListener","removeListeners","getBadgeCountAsync","_regeneratorRuntime","async","getBadgeCountAsync$","_context","prev","next","abrupt","stop","Promise","setBadgeCountAsync","badgeCount","options","badgin","setBadgeCountAsync$","_context2","window","require","set","clear"],"sources":["C:\\Users\\alexd\\Documents\\InstagramClone\\frontend\\node_modules\\expo-notifications\\src\\BadgeModule.web.ts"],"sourcesContent":["import { BadgeModule } from './BadgeModule.types';\n\nlet lastSetBadgeCount = 0;\n\nconst badgeModule: BadgeModule = {\n  addListener: () => {},\n  removeListeners: () => {},\n  getBadgeCountAsync: async () => {\n    return lastSetBadgeCount;\n  },\n  setBadgeCountAsync: async (badgeCount, options) => {\n    // If this module is loaded in SSR (NextJS), we can't modify the badge.\n    // It also can't load the badgin module, that instantly invokes methods on window.\n    if (typeof window === 'undefined') {\n      return false;\n    }\n    const badgin = require('badgin');\n    if (badgeCount > 0) {\n      badgin.set(badgeCount, options);\n    } else {\n      badgin.clear();\n    }\n    lastSetBadgeCount = badgeCount;\n    return true;\n  },\n};\n\nexport default badgeModule;\n"],"mappings":";AAEA,IAAIA,iBAAiB,GAAG,CAAC;AAEzB,IAAMC,WAAW,GAAgB;EAC/BC,WAAW,EAAE,SAAbA,WAAWA,CAAA,EAAO,CAAE,CAAC;EACrBC,eAAe,EAAE,SAAjBA,eAAeA,CAAA,EAAO,CAAE,CAAC;EACzBC,kBAAkB,EAAE,SAApBA,kBAAkBA,CAAA;IAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,oBAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAA,OAAAF,QAAA,CAAAG,MAAA,WACTX,iBAAiB;QAAA;QAAA;UAAA,OAAAQ,QAAA,CAAAI,IAAA;MAAA;IAAA,qBAAAC,OAAA;EAAA,CACzB;EACDC,kBAAkB,EAAE,SAApBA,kBAAkBA,CAASC,UAAU,EAAEC,OAAO;IAAA,IAAAC,MAAA;IAAA,OAAAZ,mBAAA,CAAAC,KAAA,UAAAY,oBAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAV,IAAA,GAAAU,SAAA,CAAAT,IAAA;QAAA;UAAA,MAGxC,OAAOU,MAAM,KAAK,WAAW;YAAAD,SAAA,CAAAT,IAAA;YAAA;UAAA;UAAA,OAAAS,SAAA,CAAAR,MAAA,WACxB,KAAK;QAAA;UAERM,MAAM,GAAGI,OAAO,CAAC,QAAQ,CAAC;UAChC,IAAIN,UAAU,GAAG,CAAC,EAAE;YAClBE,MAAM,CAACK,GAAG,CAACP,UAAU,EAAEC,OAAO,CAAC;WAChC,MAAM;YACLC,MAAM,CAACM,KAAK,EAAE;;UAEhBvB,iBAAiB,GAAGe,UAAU;UAAC,OAAAI,SAAA,CAAAR,MAAA,WACxB,IAAI;QAAA;QAAA;UAAA,OAAAQ,SAAA,CAAAP,IAAA;MAAA;IAAA,qBAAAC,OAAA;EAAA;CAEd;AAED,eAAeZ,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}