{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Notifications from 'expo-notifications';\nimport { getFirestore, doc, getDoc, collection, query, where, orderBy, onSnapshot, setDoc, deleteDoc, updateDoc, getDocs } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\nimport { CLEAR_DATA, USERS_DATA_STATE_CHANGE, USERS_LIKES_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, USER_CHATS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_STATE_CHANGE } from \"../constants/index\";\nimport { Constants } from 'react-native-unimodules';\nvar unsubscribe = [];\nexport function clearData() {\n  return function (dispatch) {\n    unsubscribe.forEach(function (unsub) {\n      return unsub();\n    });\n    unsubscribe = [];\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function reload() {\n  return function (dispatch) {\n    dispatch(clearData());\n    dispatch(fetchUser());\n    dispatch(setNotificationService());\n    dispatch(fetchUserPosts());\n    dispatch(fetchUserFollowing());\n    dispatch(fetchUserChats());\n  };\n}\nexport var setNotificationService = function setNotificationService() {\n  return function _callee(dispatch) {\n    var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status, auth, firestore, userDoc;\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context2.next = 20;\n            break;\n          }\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n        case 3:\n          _await$Notifications$ = _context2.sent;\n          existingStatus = _await$Notifications$.status;\n          finalStatus = existingStatus;\n          if (!(existingStatus !== 'granted')) {\n            _context2.next = 12;\n            break;\n          }\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n        case 9:\n          _await$Notifications$2 = _context2.sent;\n          status = _await$Notifications$2.status;\n          finalStatus = status;\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context2.next = 15;\n            break;\n          }\n          alert('Failed to get push token for push notification!');\n          return _context2.abrupt(\"return\");\n        case 15:\n          _context2.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n        case 17:\n          token = _context2.sent.data;\n          _context2.next = 21;\n          break;\n        case 20:\n          alert('Must use physical device for Push Notifications');\n        case 21:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n          Notifications.setNotificationHandler({\n            handleNotification: function handleNotification() {\n              return _regeneratorRuntime.async(function handleNotification$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    return _context.abrupt(\"return\", {\n                      shouldShowAlert: true,\n                      shouldPlaySound: false,\n                      shouldSetBadge: false\n                    });\n                  case 1:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, null, null, null, Promise);\n            }\n          });\n          if (!token) {\n            _context2.next = 29;\n            break;\n          }\n          auth = getAuth();\n          firestore = getFirestore();\n          userDoc = doc(firestore, 'users', auth.currentUser.uid);\n          _context2.next = 29;\n          return _regeneratorRuntime.awrap(updateDoc(userDoc, {\n            notificationToken: token\n          }));\n        case 29:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var sendNotification = function sendNotification(to, title, body, data) {\n  return function _callee2() {\n    return _regeneratorRuntime.async(function _callee2$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          if (to) {\n            _context3.next = 2;\n            break;\n          }\n          return _context3.abrupt(\"return\");\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              to: to,\n              sound: 'default',\n              title: title,\n              body: body,\n              data: data\n            })\n          }));\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport function fetchUser() {\n  return function (dispatch) {\n    var firestore = getFirestore();\n    var auth = getAuth();\n    var userDoc = doc(firestore, 'users', auth.currentUser.uid);\n    var unsubscribeUser = onSnapshot(userDoc, function (snapshot) {\n      if (snapshot.exists()) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: _objectSpread({\n            uid: auth.currentUser.uid\n          }, snapshot.data())\n        });\n      }\n    });\n    unsubscribe.push(unsubscribeUser);\n  };\n}\nexport function fetchUserChats() {\n  return function (dispatch) {\n    var firestore = getFirestore();\n    var auth = getAuth();\n    var chatsQuery = query(collection(firestore, 'chats'), where('users', 'array-contains', auth.currentUser.uid), orderBy('lastMessageTimestamp', 'desc'));\n    var unsubscribeChats = onSnapshot(chatsQuery, function (snapshot) {\n      var chats = snapshot.docs.map(function (doc) {\n        return _objectSpread({\n          id: doc.id\n        }, doc.data());\n      });\n      chats.forEach(function (chat) {\n        var otherUserId = chat.users.find(function (uid) {\n          return uid !== auth.currentUser.uid;\n        });\n        dispatch(fetchUsersData(otherUserId, false));\n      });\n      dispatch({\n        type: USER_CHATS_STATE_CHANGE,\n        chats: chats\n      });\n    });\n    unsubscribe.push(unsubscribeChats);\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    var firestore = getFirestore();\n    var auth = getAuth();\n    var postsQuery = query(collection(firestore, 'posts', auth.currentUser.uid, 'userPosts'), orderBy('creation', 'desc'));\n    getDocs(postsQuery).then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        return _objectSpread({\n          id: doc.id\n        }, doc.data());\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    var firestore = getFirestore();\n    var auth = getAuth();\n    var followingCollection = collection(firestore, 'following', auth.currentUser.uid, 'userFollowing');\n    var unsubscribeFollowing = onSnapshot(followingCollection, function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        return doc.id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n      following.forEach(function (uid) {\n        dispatch(fetchUsersData(uid, true));\n      });\n    });\n    unsubscribe.push(unsubscribeFollowing);\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var firestore = getFirestore();\n    var users = getState().usersState.users;\n    var userExists = users.some(function (user) {\n      return user.uid === uid;\n    });\n    if (!userExists) {\n      var userDoc = doc(firestore, 'users', uid);\n      getDoc(userDoc).then(function (snapshot) {\n        if (snapshot.exists()) {\n          var user = _objectSpread({\n            uid: uid\n          }, snapshot.data());\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        }\n      });\n      if (getPosts) {\n        dispatch(fetchUsersFollowingPosts(uid));\n      }\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    var firestore = getFirestore();\n    var postsQuery = query(collection(firestore, 'posts', uid, 'userPosts'), orderBy('creation', 'asc'));\n    getDocs(postsQuery).then(function (snapshot) {\n      var user = getState().usersState.users.find(function (u) {\n        return u.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        return _objectSpread(_objectSpread({\n          id: doc.id\n        }, doc.data()), {}, {\n          user: user\n        });\n      });\n      posts.forEach(function (post) {\n        dispatch(fetchUsersFollowingLikes(uid, post.id));\n      });\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    });\n  };\n}\nexport function fetchUsersFollowingLikes(uid, postId) {\n  return function (dispatch) {\n    var firestore = getFirestore();\n    var likesDoc = doc(firestore, 'posts', uid, 'userPosts', postId, 'likes', getAuth().currentUser.uid);\n    var unsubscribeLikes = onSnapshot(likesDoc, function (snapshot) {\n      var currentUserLike = snapshot.exists();\n      dispatch({\n        type: USERS_LIKES_STATE_CHANGE,\n        postId: postId,\n        currentUserLike: currentUserLike\n      });\n    });\n    unsubscribe.push(unsubscribeLikes);\n  };\n}\nexport function queryUsersByUsername(username) {\n  return function () {\n    var firestore = getFirestore();\n    if (username.length === 0) {\n      return Promise.resolve([]);\n    }\n    var usersQuery = query(collection(firestore, 'users'), where('username', '>=', username), orderBy('username'), limit(10));\n    return getDocs(usersQuery).then(function (snapshot) {\n      return snapshot.docs.map(function (doc) {\n        return _objectSpread({\n          id: doc.id\n        }, doc.data());\n      });\n    });\n  };\n}\nexport function deletePost(item) {\n  return function () {\n    var firestore = getFirestore();\n    var auth = getAuth();\n    var postDoc = doc(firestore, 'posts', auth.currentUser.uid, 'userPosts', item.id);\n    return deleteDoc(postDoc);\n  };\n}","map":{"version":3,"names":["Notifications","getFirestore","doc","getDoc","collection","query","where","orderBy","onSnapshot","setDoc","deleteDoc","updateDoc","getDocs","getAuth","CLEAR_DATA","USERS_DATA_STATE_CHANGE","USERS_LIKES_STATE_CHANGE","USERS_POSTS_STATE_CHANGE","USER_CHATS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_STATE_CHANGE","Constants","unsubscribe","clearData","dispatch","forEach","unsub","type","reload","fetchUser","setNotificationService","fetchUserPosts","fetchUserFollowing","fetchUserChats","_callee","token","_await$Notifications$","existingStatus","finalStatus","_await$Notifications$2","status","auth","firestore","userDoc","_regeneratorRuntime","async","_callee$","_context2","prev","next","isDevice","awrap","getPermissionsAsync","sent","requestPermissionsAsync","alert","abrupt","getExpoPushTokenAsync","data","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","setNotificationHandler","handleNotification","handleNotification$","_context","shouldShowAlert","shouldPlaySound","shouldSetBadge","stop","Promise","currentUser","uid","notificationToken","sendNotification","to","title","body","_callee2","_callee2$","_context3","fetch","method","headers","Accept","JSON","stringify","sound","unsubscribeUser","snapshot","exists","_objectSpread","push","chatsQuery","unsubscribeChats","chats","docs","map","id","chat","otherUserId","users","find","fetchUsersData","postsQuery","then","posts","followingCollection","unsubscribeFollowing","following","getPosts","getState","usersState","userExists","some","user","fetchUsersFollowingPosts","u","post","fetchUsersFollowingLikes","postId","likesDoc","unsubscribeLikes","currentUserLike","queryUsersByUsername","username","length","resolve","usersQuery","limit","deletePost","item","postDoc"],"sources":["C:/Users/alexd/Documents/InstagramClone/frontend/redux/actions/index.js"],"sourcesContent":["import * as Notifications from 'expo-notifications';\r\nimport { getFirestore, doc, getDoc, collection, query, where, orderBy, onSnapshot, setDoc, deleteDoc, updateDoc, getDocs } from 'firebase/firestore';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { CLEAR_DATA, USERS_DATA_STATE_CHANGE, USERS_LIKES_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, USER_CHATS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_STATE_CHANGE } from '../constants/index';\r\nimport { Constants } from 'react-native-unimodules';\r\n\r\nlet unsubscribe = [];\r\n\r\nexport function clearData() {\r\n    return (dispatch) => {\r\n        unsubscribe.forEach((unsub) => unsub());\r\n        unsubscribe = [];\r\n        dispatch({ type: CLEAR_DATA });\r\n    };\r\n}\r\n\r\nexport function reload() {\r\n    return (dispatch) => {\r\n        dispatch(clearData());\r\n        dispatch(fetchUser());\r\n        dispatch(setNotificationService());\r\n        dispatch(fetchUserPosts());\r\n        dispatch(fetchUserFollowing());\r\n        dispatch(fetchUserChats());\r\n    };\r\n}\r\n\r\nexport const setNotificationService = () => async (dispatch) => {\r\n    let token;\r\n    if (Constants.isDevice) {\r\n        const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n        let finalStatus = existingStatus;\r\n        if (existingStatus !== 'granted') {\r\n            const { status } = await Notifications.requestPermissionsAsync();\r\n            finalStatus = status;\r\n        }\r\n\r\n        if (finalStatus !== 'granted') {\r\n            alert('Failed to get push token for push notification!');\r\n            return;\r\n        }\r\n        token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    } else {\r\n        alert('Must use physical device for Push Notifications');\r\n    }\r\n\r\n    if (Platform.OS === 'android') {\r\n        Notifications.setNotificationChannelAsync('default', {\r\n            name: 'default',\r\n            importance: Notifications.AndroidImportance.MAX,\r\n            vibrationPattern: [0, 250, 250, 250],\r\n            lightColor: '#FF231F7C',\r\n        });\r\n    }\r\n\r\n    Notifications.setNotificationHandler({\r\n        handleNotification: async () => ({\r\n            shouldShowAlert: true,\r\n            shouldPlaySound: false,\r\n            shouldSetBadge: false,\r\n        }),\r\n    });\r\n\r\n    if (token) {\r\n        const auth = getAuth();\r\n        const firestore = getFirestore();\r\n        const userDoc = doc(firestore, 'users', auth.currentUser.uid);\r\n        await updateDoc(userDoc, { notificationToken: token });\r\n    }\r\n};\r\n\r\nexport const sendNotification = (to, title, body, data) => async () => {\r\n    if (!to) return;\r\n\r\n    await fetch('https://exp.host/--/api/v2/push/send', {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            to,\r\n            sound: 'default',\r\n            title,\r\n            body,\r\n            data,\r\n        }),\r\n    });\r\n};\r\n\r\nexport function fetchUser() {\r\n    return (dispatch) => {\r\n        const firestore = getFirestore();\r\n        const auth = getAuth();\r\n\r\n        const userDoc = doc(firestore, 'users', auth.currentUser.uid);\r\n        const unsubscribeUser = onSnapshot(userDoc, (snapshot) => {\r\n            if (snapshot.exists()) {\r\n                dispatch({\r\n                    type: USER_STATE_CHANGE,\r\n                    currentUser: { uid: auth.currentUser.uid, ...snapshot.data() },\r\n                });\r\n            }\r\n        });\r\n        unsubscribe.push(unsubscribeUser);\r\n    };\r\n}\r\n\r\nexport function fetchUserChats() {\r\n    return (dispatch) => {\r\n        const firestore = getFirestore();\r\n        const auth = getAuth();\r\n\r\n        const chatsQuery = query(\r\n            collection(firestore, 'chats'),\r\n            where('users', 'array-contains', auth.currentUser.uid),\r\n            orderBy('lastMessageTimestamp', 'desc')\r\n        );\r\n\r\n        const unsubscribeChats = onSnapshot(chatsQuery, (snapshot) => {\r\n            const chats = snapshot.docs.map((doc) => ({\r\n                id: doc.id,\r\n                ...doc.data(),\r\n            }));\r\n\r\n            chats.forEach((chat) => {\r\n                const otherUserId = chat.users.find((uid) => uid !== auth.currentUser.uid);\r\n                dispatch(fetchUsersData(otherUserId, false));\r\n            });\r\n\r\n            dispatch({ type: USER_CHATS_STATE_CHANGE, chats });\r\n        });\r\n\r\n        unsubscribe.push(unsubscribeChats);\r\n    };\r\n}\r\n\r\nexport function fetchUserPosts() {\r\n    return (dispatch) => {\r\n        const firestore = getFirestore();\r\n        const auth = getAuth();\r\n\r\n        const postsQuery = query(\r\n            collection(firestore, 'posts', auth.currentUser.uid, 'userPosts'),\r\n            orderBy('creation', 'desc')\r\n        );\r\n\r\n        getDocs(postsQuery).then((snapshot) => {\r\n            const posts = snapshot.docs.map((doc) => ({\r\n                id: doc.id,\r\n                ...doc.data(),\r\n            }));\r\n            dispatch({ type: USER_POSTS_STATE_CHANGE, posts });\r\n        });\r\n    };\r\n}\r\n\r\nexport function fetchUserFollowing() {\r\n    return (dispatch) => {\r\n        const firestore = getFirestore();\r\n        const auth = getAuth();\r\n\r\n        const followingCollection = collection(firestore, 'following', auth.currentUser.uid, 'userFollowing');\r\n        const unsubscribeFollowing = onSnapshot(followingCollection, (snapshot) => {\r\n            const following = snapshot.docs.map((doc) => doc.id);\r\n\r\n            dispatch({ type: USER_FOLLOWING_STATE_CHANGE, following });\r\n            following.forEach((uid) => {\r\n                dispatch(fetchUsersData(uid, true));\r\n            });\r\n        });\r\n\r\n        unsubscribe.push(unsubscribeFollowing);\r\n    };\r\n}\r\n\r\nexport function fetchUsersData(uid, getPosts) {\r\n    return (dispatch, getState) => {\r\n        const firestore = getFirestore();\r\n        const users = getState().usersState.users;\r\n        const userExists = users.some((user) => user.uid === uid);\r\n\r\n        if (!userExists) {\r\n            const userDoc = doc(firestore, 'users', uid);\r\n            getDoc(userDoc).then((snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    const user = { uid, ...snapshot.data() };\r\n                    dispatch({ type: USERS_DATA_STATE_CHANGE, user });\r\n                }\r\n            });\r\n\r\n            if (getPosts) {\r\n                dispatch(fetchUsersFollowingPosts(uid));\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport function fetchUsersFollowingPosts(uid) {\r\n    return (dispatch, getState) => {\r\n        const firestore = getFirestore();\r\n\r\n        const postsQuery = query(\r\n            collection(firestore, 'posts', uid, 'userPosts'),\r\n            orderBy('creation', 'asc')\r\n        );\r\n\r\n        getDocs(postsQuery).then((snapshot) => {\r\n            const user = getState().usersState.users.find((u) => u.uid === uid);\r\n\r\n            const posts = snapshot.docs.map((doc) => ({\r\n                id: doc.id,\r\n                ...doc.data(),\r\n                user,\r\n            }));\r\n\r\n            posts.forEach((post) => {\r\n                dispatch(fetchUsersFollowingLikes(uid, post.id));\r\n            });\r\n\r\n            dispatch({ type: USERS_POSTS_STATE_CHANGE, posts, uid });\r\n        });\r\n    };\r\n}\r\n\r\nexport function fetchUsersFollowingLikes(uid, postId) {\r\n    return (dispatch) => {\r\n        const firestore = getFirestore();\r\n\r\n        const likesDoc = doc(firestore, 'posts', uid, 'userPosts', postId, 'likes', getAuth().currentUser.uid);\r\n        const unsubscribeLikes = onSnapshot(likesDoc, (snapshot) => {\r\n            const currentUserLike = snapshot.exists();\r\n            dispatch({ type: USERS_LIKES_STATE_CHANGE, postId, currentUserLike });\r\n        });\r\n\r\n        unsubscribe.push(unsubscribeLikes);\r\n    };\r\n}\r\n\r\nexport function queryUsersByUsername(username) {\r\n    return () => {\r\n        const firestore = getFirestore();\r\n\r\n        if (username.length === 0) {\r\n            return Promise.resolve([]);\r\n        }\r\n\r\n        const usersQuery = query(\r\n            collection(firestore, 'users'),\r\n            where('username', '>=', username),\r\n            orderBy('username'),\r\n            limit(10)\r\n        );\r\n\r\n        return getDocs(usersQuery).then((snapshot) =>\r\n            snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }))\r\n        );\r\n    };\r\n}\r\n\r\nexport function deletePost(item) {\r\n    return () => {\r\n        const firestore = getFirestore();\r\n        const auth = getAuth();\r\n\r\n        const postDoc = doc(firestore, 'posts', auth.currentUser.uid, 'userPosts', item.id);\r\n        return deleteDoc(postDoc);\r\n    };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}