{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError, Platform, SyntheticPlatformEmitter } from '@unimodules/core';\nimport Constants from 'expo-constants';\nexport default function getDevicePushTokenAsync() {\n  var data;\n  return _regeneratorRuntime.async(function getDevicePushTokenAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return _regeneratorRuntime.awrap(_subscribeDeviceToPushNotificationsAsync());\n      case 2:\n        data = _context.sent;\n        SyntheticPlatformEmitter.emit('onDevicePushToken', {\n          devicePushToken: data\n        });\n        return _context.abrupt(\"return\", {\n          type: Platform.OS,\n          data: data\n        });\n      case 5:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError('ERR_UNAVAILABLE', 'The Web Notifications API is not available on this device.');\n  }\n  if (!navigator.serviceWorker) {\n    throw new CodedError('ERR_UNAVAILABLE', 'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');\n  }\n  if (Notification.permission !== 'granted') {\n    throw new CodedError('ERR_NOTIFICATIONS_PERMISSION_DENIED', \"Cannot use web notifications without permissions granted. Request permissions with \\\"expo-permissions\\\".\");\n  }\n}\nfunction _subscribeDeviceToPushNotificationsAsync() {\n  var _Constants$manifest$n, _Constants$manifest$n2, _Constants$manifest;\n  var registration, subscribeOptions, pushSubscription, pushSubscriptionJson, subscriptionObject, notificationIcon;\n  return _regeneratorRuntime.async(function _subscribeDeviceToPushNotificationsAsync$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        if ((_Constants$manifest$n = Constants.manifest.notification) != null && _Constants$manifest$n.vapidPublicKey) {\n          _context2.next = 2;\n          break;\n        }\n        throw new CodedError('ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');\n      case 2:\n        if ((_Constants$manifest$n2 = Constants.manifest.notification) != null && _Constants$manifest$n2.serviceWorkerPath) {\n          _context2.next = 4;\n          break;\n        }\n        throw new CodedError('ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION', 'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.');\n      case 4:\n        guardPermission();\n        registration = null;\n        _context2.prev = 6;\n        _context2.next = 9;\n        return _regeneratorRuntime.awrap(navigator.serviceWorker.register(Constants.manifest.notification.serviceWorkerPath));\n      case 9:\n        registration = _context2.sent;\n        _context2.next = 15;\n        break;\n      case 12:\n        _context2.prev = 12;\n        _context2.t0 = _context2[\"catch\"](6);\n        throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', \"Could not register this device for push notifications because the service worker (\" + Constants.manifest.notification.serviceWorkerPath + \") could not be registered: \" + _context2.t0);\n      case 15:\n        _context2.next = 17;\n        return _regeneratorRuntime.awrap(navigator.serviceWorker.ready);\n      case 17:\n        if (registration.active) {\n          _context2.next = 19;\n          break;\n        }\n        throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', 'Could not register this device for push notifications because the service worker is not active.');\n      case 19:\n        subscribeOptions = {\n          userVisibleOnly: true,\n          applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey)\n        };\n        pushSubscription = null;\n        _context2.prev = 21;\n        _context2.next = 24;\n        return _regeneratorRuntime.awrap(registration.pushManager.subscribe(subscribeOptions));\n      case 24:\n        pushSubscription = _context2.sent;\n        _context2.next = 30;\n        break;\n      case 27:\n        _context2.prev = 27;\n        _context2.t1 = _context2[\"catch\"](21);\n        throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with the browser endpoint. (' + _context2.t1 + ')');\n      case 30:\n        pushSubscriptionJson = pushSubscription.toJSON();\n        subscriptionObject = {\n          endpoint: pushSubscriptionJson.endpoint,\n          keys: {\n            p256dh: pushSubscriptionJson.keys.p256dh,\n            auth: pushSubscriptionJson.keys.auth\n          }\n        };\n        notificationIcon = (((_Constants$manifest = Constants.manifest) == null ? void 0 : _Constants$manifest.notification) || {}).icon;\n        _context2.next = 35;\n        return _regeneratorRuntime.awrap(registration.active.postMessage(JSON.stringify({\n          fromExpoWebClient: {\n            notificationIcon: notificationIcon\n          }\n        })));\n      case 35:\n        return _context2.abrupt(\"return\", subscriptionObject);\n      case 36:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, [[6, 12], [21, 27]], Promise);\n}\nfunction _urlBase64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}","map":{"version":3,"names":["CodedError","Platform","SyntheticPlatformEmitter","Constants","getDevicePushTokenAsync","data","_regeneratorRuntime","async","getDevicePushTokenAsync$","_context","prev","next","awrap","_subscribeDeviceToPushNotificationsAsync","sent","emit","devicePushToken","abrupt","type","OS","stop","Promise","guardPermission","window","navigator","serviceWorker","Notification","permission","_Constants$manifest$n","_Constants$manifest$n2","_Constants$manifest","registration","subscribeOptions","pushSubscription","pushSubscriptionJson","subscriptionObject","notificationIcon","_subscribeDeviceToPushNotificationsAsync$","_context2","manifest","notification","vapidPublicKey","serviceWorkerPath","register","t0","ready","active","userVisibleOnly","applicationServerKey","_urlBase64ToUint8Array","pushManager","subscribe","t1","toJSON","endpoint","keys","p256dh","auth","icon","postMessage","JSON","stringify","fromExpoWebClient","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt"],"sources":["C:\\Users\\alexd\\Documents\\InstagramClone\\frontend\\node_modules\\expo-notifications\\src\\getDevicePushTokenAsync.web.ts"],"sourcesContent":["import { CodedError, Platform, SyntheticPlatformEmitter } from '@unimodules/core';\nimport Constants from 'expo-constants';\n\nimport { DevicePushToken } from './Tokens.types';\n\nexport default async function getDevicePushTokenAsync(): Promise<DevicePushToken> {\n  const data = await _subscribeDeviceToPushNotificationsAsync();\n  SyntheticPlatformEmitter.emit('onDevicePushToken', { devicePushToken: data });\n  return { type: Platform.OS, data };\n}\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'The Web Notifications API is not available on this device.'\n    );\n  }\n  if (!navigator.serviceWorker) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PERMISSION_DENIED',\n      `Cannot use web notifications without permissions granted. Request permissions with \"expo-permissions\".`\n    );\n  }\n}\n\nasync function _subscribeDeviceToPushNotificationsAsync(): Promise<DevicePushToken['data']> {\n  // @ts-ignore: TODO: not on the schema\n  if (!Constants.manifest.notification?.vapidPublicKey) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n  // @ts-ignore: TODO: not on the schema\n  if (!Constants.manifest.notification?.serviceWorkerPath) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION',\n      'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.'\n    );\n  }\n  guardPermission();\n\n  let registration: ServiceWorkerRegistration | null = null;\n  try {\n    registration = await navigator.serviceWorker.register(\n      // @ts-ignore: TODO: not on the schema\n      Constants.manifest.notification.serviceWorkerPath\n    );\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      // @ts-ignore: TODO: not on the schema\n      `Could not register this device for push notifications because the service worker (${Constants.manifest.notification.serviceWorkerPath}) could not be registered: ${error}`\n    );\n  }\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'Could not register this device for push notifications because the service worker is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    // @ts-ignore: TODO: not on the schema\n    applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey),\n  };\n  let pushSubscription: PushSubscription | null = null;\n  try {\n    pushSubscription = await registration.pushManager.subscribe(subscribeOptions);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'The device was unable to register for remote notifications with the browser endpoint. (' +\n        error +\n        ')'\n    );\n  }\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  const notificationIcon = (Constants.manifest?.notification || {}).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}