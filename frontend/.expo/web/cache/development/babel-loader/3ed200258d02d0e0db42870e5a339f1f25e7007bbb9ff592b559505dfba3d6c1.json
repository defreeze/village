{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from '@unimodules/core';\nimport { getAssetByID } from \"./AssetRegistry\";\nimport * as AssetSources from \"./AssetSources\";\nimport * as AssetUris from \"./AssetUris\";\nimport { getEmbeddedAssetUri } from \"./EmbeddedAssets\";\nimport * as ImageAssets from \"./ImageAssets\";\nimport { downloadAsync as _downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from \"./PlatformUtils\";\nimport resolveAssetSource from \"./resolveAssetSource\";\nexport var Asset = function () {\n  function Asset(_ref) {\n    var name = _ref.name,\n      type = _ref.type,\n      _ref$hash = _ref.hash,\n      hash = _ref$hash === void 0 ? null : _ref$hash,\n      uri = _ref.uri,\n      width = _ref.width,\n      height = _ref.height;\n    _classCallCheck(this, Asset);\n    this.hash = null;\n    this.localUri = null;\n    this.width = null;\n    this.height = null;\n    this.downloading = false;\n    this.downloaded = false;\n    this._downloadCallbacks = [];\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n    if (hash) {\n      this.localUri = getEmbeddedAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n  return _createClass(Asset, [{\n    key: \"downloadAsync\",\n    value: function downloadAsync() {\n      var _this = this;\n      var _await$ImageAssets$ge, width, height, name;\n      return _regeneratorRuntime.async(function downloadAsync$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!this.downloaded) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt(\"return\", this);\n          case 2:\n            if (!this.downloading) {\n              _context.next = 6;\n              break;\n            }\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n              _this._downloadCallbacks.push({\n                resolve: resolve,\n                reject: reject\n              });\n            }));\n          case 5:\n            return _context.abrupt(\"return\", this);\n          case 6:\n            this.downloading = true;\n            _context.prev = 7;\n            if (!(Platform.OS === 'web')) {\n              _context.next = 22;\n              break;\n            }\n            if (!ImageAssets.isImageType(this.type)) {\n              _context.next = 21;\n              break;\n            }\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(ImageAssets.getImageInfoAsync(this.uri));\n          case 12:\n            _await$ImageAssets$ge = _context.sent;\n            width = _await$ImageAssets$ge.width;\n            height = _await$ImageAssets$ge.height;\n            name = _await$ImageAssets$ge.name;\n            this.width = width;\n            this.height = height;\n            this.name = name;\n            _context.next = 22;\n            break;\n          case 21:\n            this.name = AssetUris.getFilename(this.uri);\n          case 22:\n            _context.next = 24;\n            return _regeneratorRuntime.awrap(_downloadAsync(this.uri, this.hash, this.type, this.name));\n          case 24:\n            this.localUri = _context.sent;\n            this.downloaded = true;\n            this._downloadCallbacks.forEach(function (_ref2) {\n              var resolve = _ref2.resolve;\n              return resolve();\n            });\n            _context.next = 33;\n            break;\n          case 29:\n            _context.prev = 29;\n            _context.t0 = _context[\"catch\"](7);\n            this._downloadCallbacks.forEach(function (_ref3) {\n              var reject = _ref3.reject;\n              return reject(_context.t0);\n            });\n            throw _context.t0;\n          case 33:\n            _context.prev = 33;\n            this.downloading = false;\n            this._downloadCallbacks = [];\n            return _context.finish(33);\n          case 37:\n            return _context.abrupt(\"return\", this);\n          case 38:\n          case \"end\":\n            return _context.stop();\n        }\n      }, null, this, [[7, 29, 33, 37]], Promise);\n    }\n  }], [{\n    key: \"loadAsync\",\n    value: function loadAsync(moduleId) {\n      var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n      return Promise.all(moduleIds.map(function (moduleId) {\n        return Asset.fromModule(moduleId).downloadAsync();\n      }));\n    }\n  }, {\n    key: \"fromModule\",\n    value: function fromModule(virtualAssetModule) {\n      if (typeof virtualAssetModule === 'string') {\n        return Asset.fromURI(virtualAssetModule);\n      }\n      var meta = getAssetByID(virtualAssetModule);\n      if (!meta) {\n        throw new Error(\"Module \\\"\" + virtualAssetModule + \"\\\" is missing from the asset registry\");\n      }\n      if (!IS_ENV_WITH_UPDATES_ENABLED) {\n        var _resolveAssetSource = resolveAssetSource(virtualAssetModule),\n          uri = _resolveAssetSource.uri;\n        var asset = new Asset({\n          name: meta.name,\n          type: meta.type,\n          hash: meta.hash,\n          uri: uri,\n          width: meta.width,\n          height: meta.height\n        });\n        if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n          asset.localUri = asset.uri;\n          asset.downloaded = true;\n        }\n        Asset.byHash[meta.hash] = asset;\n        return asset;\n      }\n      return Asset.fromMetadata(meta);\n    }\n  }, {\n    key: \"fromMetadata\",\n    value: function fromMetadata(meta) {\n      var metaHash = meta.hash;\n      if (Asset.byHash[metaHash]) {\n        return Asset.byHash[metaHash];\n      }\n      var _AssetSources$selectA = AssetSources.selectAssetSource(meta),\n        uri = _AssetSources$selectA.uri,\n        hash = _AssetSources$selectA.hash;\n      var asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: hash,\n        uri: uri,\n        width: meta.width,\n        height: meta.height\n      });\n      Asset.byHash[metaHash] = asset;\n      return asset;\n    }\n  }, {\n    key: \"fromURI\",\n    value: function fromURI(uri) {\n      if (Asset.byUri[uri]) {\n        return Asset.byUri[uri];\n      }\n      var type = '';\n      if (uri.indexOf(';base64') > -1) {\n        type = uri.split(';')[0].split('/')[1];\n      } else {\n        var extension = AssetUris.getFileExtension(uri);\n        type = extension.startsWith('.') ? extension.substring(1) : extension;\n      }\n      var asset = new Asset({\n        name: '',\n        type: type,\n        hash: null,\n        uri: uri\n      });\n      Asset.byUri[uri] = asset;\n      return asset;\n    }\n  }]);\n}();\nAsset.byHash = {};\nAsset.byUri = {};","map":{"version":3,"names":["Platform","getAssetByID","AssetSources","AssetUris","getEmbeddedAssetUri","ImageAssets","downloadAsync","IS_ENV_WITH_UPDATES_ENABLED","resolveAssetSource","Asset","_ref","name","type","_ref$hash","hash","uri","width","height","_classCallCheck","localUri","downloading","downloaded","_downloadCallbacks","OS","getFilename","getFileExtension","_createClass","key","value","_this","_await$ImageAssets$ge","_regeneratorRuntime","async","downloadAsync$","_context","prev","next","abrupt","awrap","Promise","resolve","reject","push","isImageType","getImageInfoAsync","sent","forEach","_ref2","t0","_ref3","finish","stop","loadAsync","moduleId","moduleIds","Array","isArray","all","map","fromModule","virtualAssetModule","fromURI","meta","Error","_resolveAssetSource","asset","includes","byHash","fromMetadata","metaHash","_AssetSources$selectA","selectAssetSource","byUri","indexOf","split","extension","startsWith","substring"],"sources":["C:\\Users\\alexd\\Documents\\InstagramClone\\frontend\\node_modules\\expo-asset\\src\\Asset.ts"],"sourcesContent":["import { Platform } from '@unimodules/core';\n\nimport { getAssetByID } from './AssetRegistry';\nimport * as AssetSources from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport { getEmbeddedAssetUri } from './EmbeddedAssets';\nimport * as ImageAssets from './ImageAssets';\nimport { downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n\ntype AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport type AssetMetadata = AssetSources.AssetMetadata;\n\nexport class Asset {\n  static byHash = {};\n  static byUri = {};\n\n  name: string;\n  type: string;\n  hash: string | null = null;\n  uri: string;\n  localUri: string | null = null;\n  width: number | null = null;\n  height: number | null = null;\n  downloading: boolean = false;\n  downloaded: boolean = false;\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (hash) {\n      this.localUri = getEmbeddedAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  static loadAsync(moduleId: number | number[] | string | string[]): Promise<Asset[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map(moduleId => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_ENV_WITH_UPDATES_ENABLED) {\n      const { uri } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    }\n\n    const { uri, hash } = AssetSources.selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  async downloadAsync(): Promise<this> {\n    if (this.downloaded) {\n      return this;\n    }\n    if (this.downloading) {\n      await new Promise((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return this;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type, this.name);\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n    return this;\n  }\n}\n"],"mappings":";;;AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAE3C,SAASC,YAAY;AACrB,OAAO,KAAKC,YAAY;AACxB,OAAO,KAAKC,SAAS;AACrB,SAASC,mBAAmB;AAC5B,OAAO,KAAKC,WAAW;AACvB,SAASC,aAAa,IAAbA,cAAa,EAAEC,2BAA2B;AACnD,OAAOC,kBAAkB;AAkBzB,WAAaC,KAAK;EAehB,SAAAA,MAAAC,IAAA,EAA4E;IAAA,IAA9DC,IAAI,GAAAD,IAAA,CAAJC,IAAI;MAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;MAAAC,SAAA,GAAAH,IAAA,CAAEI,IAAI;MAAJA,IAAI,GAAAD,SAAA,cAAG,IAAI,GAAAA,SAAA;MAAEE,GAAG,GAAAL,IAAA,CAAHK,GAAG;MAAEC,KAAK,GAAAN,IAAA,CAALM,KAAK;MAAEC,MAAM,GAAAP,IAAA,CAANO,MAAM;IAAAC,eAAA,OAAAT,KAAA;IATzD,KAAAK,IAAI,GAAkB,IAAI;IAE1B,KAAAK,QAAQ,GAAkB,IAAI;IAC9B,KAAAH,KAAK,GAAkB,IAAI;IAC3B,KAAAC,MAAM,GAAkB,IAAI;IAC5B,KAAAG,WAAW,GAAY,KAAK;IAC5B,KAAAC,UAAU,GAAY,KAAK;IAC3B,KAAAC,kBAAkB,GAA+B,EAAE;IAGjD,IAAI,CAACX,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,GAAG,GAAGA,GAAG;IAEd,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;MAC7B,IAAI,CAACA,KAAK,GAAGA,KAAK;;IAEpB,IAAI,OAAOC,MAAM,KAAK,QAAQ,EAAE;MAC9B,IAAI,CAACA,MAAM,GAAGA,MAAM;;IAGtB,IAAIH,IAAI,EAAE;MACR,IAAI,CAACK,QAAQ,GAAGf,mBAAmB,CAACU,IAAI,EAAEF,IAAI,CAAC;MAC/C,IAAI,IAAI,CAACO,QAAQ,EAAE;QACjB,IAAI,CAACE,UAAU,GAAG,IAAI;;;IAI1B,IAAIrB,QAAQ,CAACuB,EAAE,KAAK,KAAK,EAAE;MACzB,IAAI,CAACZ,IAAI,EAAE;QACT,IAAI,CAACA,IAAI,GAAGR,SAAS,CAACqB,WAAW,CAACT,GAAG,CAAC;;MAExC,IAAI,CAACH,IAAI,EAAE;QACT,IAAI,CAACA,IAAI,GAAGT,SAAS,CAACsB,gBAAgB,CAACV,GAAG,CAAC;;;EAGjD;EAAC,OAAAW,YAAA,CAAAjB,KAAA;IAAAkB,GAAA;IAAAC,KAAA,EA6FD,SAAMtB,aAAaA,CAAA;MAAA,IAAAuB,KAAA;MAAA,IAAAC,qBAAA,EAAAd,KAAA,EAAAC,MAAA,EAAAN,IAAA;MAAA,OAAAoB,mBAAA,CAAAC,KAAA,UAAAC,eAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAA,KACb,IAAI,CAACf,UAAU;cAAAa,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAA,OAAAF,QAAA,CAAAG,MAAA,WACV,IAAI;UAAA;YAAA,KAET,IAAI,CAACjB,WAAW;cAAAc,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OAAAL,mBAAA,CAAAO,KAAA,CACZ,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAI;cACpCZ,KAAI,CAACP,kBAAkB,CAACoB,IAAI,CAAC;gBAAEF,OAAO,EAAPA,OAAO;gBAAEC,MAAM,EAANA;cAAM,CAAE,CAAC;YACnD,CAAC,CAAC;UAAA;YAAA,OAAAP,QAAA,CAAAG,MAAA,WACK,IAAI;UAAA;YAEb,IAAI,CAACjB,WAAW,GAAG,IAAI;YAACc,QAAA,CAAAC,IAAA;YAAA,MAGlBnC,QAAQ,CAACuB,EAAE,KAAK,KAAK;cAAAW,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAA,KACnB/B,WAAW,CAACsC,WAAW,CAAC,IAAI,CAAC/B,IAAI,CAAC;cAAAsB,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OAAAL,mBAAA,CAAAO,KAAA,CACEjC,WAAW,CAACuC,iBAAiB,CAAC,IAAI,CAAC7B,GAAG,CAAC;UAAA;YAAAe,qBAAA,GAAAI,QAAA,CAAAW,IAAA;YAArE7B,KAAK,GAAAc,qBAAA,CAALd,KAAK;YAAEC,MAAM,GAAAa,qBAAA,CAANb,MAAM;YAAEN,IAAI,GAAAmB,qBAAA,CAAJnB,IAAI;YAC3B,IAAI,CAACK,KAAK,GAAGA,KAAK;YAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;YACpB,IAAI,CAACN,IAAI,GAAGA,IAAI;YAACuB,QAAA,CAAAE,IAAA;YAAA;UAAA;YAEjB,IAAI,CAACzB,IAAI,GAAGR,SAAS,CAACqB,WAAW,CAAC,IAAI,CAACT,GAAG,CAAC;UAAC;YAAAmB,QAAA,CAAAE,IAAA;YAAA,OAAAL,mBAAA,CAAAO,KAAA,CAG1BhC,cAAa,CAAC,IAAI,CAACS,GAAG,EAAE,IAAI,CAACD,IAAI,EAAE,IAAI,CAACF,IAAI,EAAE,IAAI,CAACD,IAAI,CAAC;UAAA;YAA9E,IAAI,CAACQ,QAAQ,GAAAe,QAAA,CAAAW,IAAA;YAEb,IAAI,CAACxB,UAAU,GAAG,IAAI;YACtB,IAAI,CAACC,kBAAkB,CAACwB,OAAO,CAAC,UAAAC,KAAA;cAAA,IAAGP,OAAO,GAAAO,KAAA,CAAPP,OAAO;cAAA,OAAOA,OAAO,EAAE;YAAA,EAAC;YAACN,QAAA,CAAAE,IAAA;YAAA;UAAA;YAAAF,QAAA,CAAAC,IAAA;YAAAD,QAAA,CAAAc,EAAA,GAAAd,QAAA;YAE5D,IAAI,CAACZ,kBAAkB,CAACwB,OAAO,CAAC,UAAAG,KAAA;cAAA,IAAGR,MAAM,GAAAQ,KAAA,CAANR,MAAM;cAAA,OAAOA,MAAM,CAAAP,QAAA,CAAAc,EAAE,CAAC;YAAA,EAAC;YAAC,MAAAd,QAAA,CAAAc,EAAA;UAAA;YAAAd,QAAA,CAAAC,IAAA;YAG3D,IAAI,CAACf,WAAW,GAAG,KAAK;YACxB,IAAI,CAACE,kBAAkB,GAAG,EAAE;YAAC,OAAAY,QAAA,CAAAgB,MAAA;UAAA;YAAA,OAAAhB,QAAA,CAAAG,MAAA,WAExB,IAAI;UAAA;UAAA;YAAA,OAAAH,QAAA,CAAAiB,IAAA;QAAA;MAAA,kCAAAZ,OAAA;IAAA;EACZ;IAAAZ,GAAA;IAAAC,KAAA,EA9HD,SAAOwB,SAASA,CAACC,QAA+C;MAC9D,IAAMC,SAAS,GAAGC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,GAAGA,QAAQ,GAAG,CAACA,QAAQ,CAAC;MACjE,OAAOd,OAAO,CAACkB,GAAG,CAACH,SAAS,CAACI,GAAG,CAAC,UAAAL,QAAQ;QAAA,OAAI5C,KAAK,CAACkD,UAAU,CAACN,QAAQ,CAAC,CAAC/C,aAAa,EAAE;MAAA,EAAC,CAAC;IAC3F;EAAC;IAAAqB,GAAA;IAAAC,KAAA,EAED,SAAO+B,UAAUA,CAACC,kBAAmC;MACnD,IAAI,OAAOA,kBAAkB,KAAK,QAAQ,EAAE;QAC1C,OAAOnD,KAAK,CAACoD,OAAO,CAACD,kBAAkB,CAAC;;MAG1C,IAAME,IAAI,GAAG7D,YAAY,CAAC2D,kBAAkB,CAAC;MAC7C,IAAI,CAACE,IAAI,EAAE;QACT,MAAM,IAAIC,KAAK,eAAYH,kBAAkB,0CAAsC,CAAC;;MAKtF,IAAI,CAACrD,2BAA2B,EAAE;QAChC,IAAAyD,mBAAA,GAAgBxD,kBAAkB,CAACoD,kBAAkB,CAAC;UAA9C7C,GAAG,GAAAiD,mBAAA,CAAHjD,GAAG;QACX,IAAMkD,KAAK,GAAG,IAAIxD,KAAK,CAAC;UACtBE,IAAI,EAAEmD,IAAI,CAACnD,IAAI;UACfC,IAAI,EAAEkD,IAAI,CAAClD,IAAI;UACfE,IAAI,EAAEgD,IAAI,CAAChD,IAAI;UACfC,GAAG,EAAHA,GAAG;UACHC,KAAK,EAAE8C,IAAI,CAAC9C,KAAK;UACjBC,MAAM,EAAE6C,IAAI,CAAC7C;SACd,CAAC;QAMF,IAAIjB,QAAQ,CAACuB,EAAE,KAAK,SAAS,IAAI,CAACR,GAAG,CAACmD,QAAQ,CAAC,GAAG,CAAC,KAAKJ,IAAI,CAAC9C,KAAK,IAAI8C,IAAI,CAAC7C,MAAM,CAAC,EAAE;UAClFgD,KAAK,CAAC9C,QAAQ,GAAG8C,KAAK,CAAClD,GAAG;UAC1BkD,KAAK,CAAC5C,UAAU,GAAG,IAAI;;QAGzBZ,KAAK,CAAC0D,MAAM,CAACL,IAAI,CAAChD,IAAI,CAAC,GAAGmD,KAAK;QAC/B,OAAOA,KAAK;;MAGd,OAAOxD,KAAK,CAAC2D,YAAY,CAACN,IAAI,CAAC;IACjC;EAAC;IAAAnC,GAAA;IAAAC,KAAA,EAED,SAAOwC,YAAYA,CAACN,IAAmB;MAGrC,IAAMO,QAAQ,GAAGP,IAAI,CAAChD,IAAI;MAC1B,IAAIL,KAAK,CAAC0D,MAAM,CAACE,QAAQ,CAAC,EAAE;QAC1B,OAAO5D,KAAK,CAAC0D,MAAM,CAACE,QAAQ,CAAC;;MAG/B,IAAAC,qBAAA,GAAsBpE,YAAY,CAACqE,iBAAiB,CAACT,IAAI,CAAC;QAAlD/C,GAAG,GAAAuD,qBAAA,CAAHvD,GAAG;QAAED,IAAI,GAAAwD,qBAAA,CAAJxD,IAAI;MACjB,IAAMmD,KAAK,GAAG,IAAIxD,KAAK,CAAC;QACtBE,IAAI,EAAEmD,IAAI,CAACnD,IAAI;QACfC,IAAI,EAAEkD,IAAI,CAAClD,IAAI;QACfE,IAAI,EAAJA,IAAI;QACJC,GAAG,EAAHA,GAAG;QACHC,KAAK,EAAE8C,IAAI,CAAC9C,KAAK;QACjBC,MAAM,EAAE6C,IAAI,CAAC7C;OACd,CAAC;MACFR,KAAK,CAAC0D,MAAM,CAACE,QAAQ,CAAC,GAAGJ,KAAK;MAC9B,OAAOA,KAAK;IACd;EAAC;IAAAtC,GAAA;IAAAC,KAAA,EAED,SAAOiC,OAAOA,CAAC9C,GAAW;MACxB,IAAIN,KAAK,CAAC+D,KAAK,CAACzD,GAAG,CAAC,EAAE;QACpB,OAAON,KAAK,CAAC+D,KAAK,CAACzD,GAAG,CAAC;;MAIzB,IAAIH,IAAI,GAAG,EAAE;MACb,IAAIG,GAAG,CAAC0D,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE;QAC/B7D,IAAI,GAAGG,GAAG,CAAC2D,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;OACvC,MAAM;QACL,IAAMC,SAAS,GAAGxE,SAAS,CAACsB,gBAAgB,CAACV,GAAG,CAAC;QACjDH,IAAI,GAAG+D,SAAS,CAACC,UAAU,CAAC,GAAG,CAAC,GAAGD,SAAS,CAACE,SAAS,CAAC,CAAC,CAAC,GAAGF,SAAS;;MAGvE,IAAMV,KAAK,GAAG,IAAIxD,KAAK,CAAC;QACtBE,IAAI,EAAE,EAAE;QACRC,IAAI,EAAJA,IAAI;QACJE,IAAI,EAAE,IAAI;QACVC,GAAG,EAAHA;OACD,CAAC;MAEFN,KAAK,CAAC+D,KAAK,CAACzD,GAAG,CAAC,GAAGkD,KAAK;MAExB,OAAOA,KAAK;IACd;EAAC;AAAA;AArIMxD,KAAA,CAAA0D,MAAM,GAAG,EAAE;AACX1D,KAAA,CAAA+D,KAAK,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}