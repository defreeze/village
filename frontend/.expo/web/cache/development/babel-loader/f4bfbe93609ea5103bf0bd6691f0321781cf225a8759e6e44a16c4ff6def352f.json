{"ast":null,"code":"var _ExpoUpdates$releaseC, _ExpoUpdates$localAss, _manifest2, _manifest$developer, _NativeModulesProxy$E;\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { RCTDeviceEventEmitter, CodedError, NativeModulesProxy, UnavailabilityError } from '@unimodules/core';\nimport { EventEmitter } from 'fbemitter';\nimport ExpoUpdates from \"./ExpoUpdates\";\nexport * from \"./Updates.types\";\nexport var updateId = ExpoUpdates.updateId && typeof ExpoUpdates.updateId === 'string' ? ExpoUpdates.updateId.toLowerCase() : null;\nexport var releaseChannel = (_ExpoUpdates$releaseC = ExpoUpdates.releaseChannel) != null ? _ExpoUpdates$releaseC : 'default';\nexport var localAssets = (_ExpoUpdates$localAss = ExpoUpdates.localAssets) != null ? _ExpoUpdates$localAss : {};\nexport var isEmergencyLaunch = ExpoUpdates.isEmergencyLaunch || false;\nexport var isUsingEmbeddedAssets = ExpoUpdates.isUsingEmbeddedAssets || false;\nvar _manifest = ExpoUpdates.manifest;\nif (ExpoUpdates.manifestString) {\n  _manifest = JSON.parse(ExpoUpdates.manifestString);\n}\nexport var manifest = (_manifest2 = _manifest) != null ? _manifest2 : {};\nvar isUsingDeveloperTool = !!((_manifest$developer = manifest.developer) != null && _manifest$developer.tool);\nvar isUsingExpoDevelopmentClient = ((_NativeModulesProxy$E = NativeModulesProxy.ExponentConstants) == null ? void 0 : _NativeModulesProxy$E.appOwnership) === 'expo';\nvar manualUpdatesInstructions = isUsingExpoDevelopmentClient ? 'To test manual updates, publish your project using `expo publish` and open the published ' + 'version in this development client.' : 'To test manual updates, make a release build with `npm run ios --configuration Release` or ' + '`npm run android --variant Release`.';\nexport function reloadAsync() {\n  return _regeneratorRuntime.async(function reloadAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        if (ExpoUpdates.reload) {\n          _context.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('Updates', 'reloadAsync');\n      case 2:\n        if (!(__DEV__ && !isUsingExpoDevelopmentClient)) {\n          _context.next = 4;\n          break;\n        }\n        throw new CodedError('ERR_UPDATES_DISABLED', \"You cannot use the Updates module in development mode in a production app. \" + manualUpdatesInstructions);\n      case 4:\n        _context.next = 6;\n        return _regeneratorRuntime.awrap(ExpoUpdates.reload());\n      case 6:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function checkForUpdateAsync() {\n  var result;\n  return _regeneratorRuntime.async(function checkForUpdateAsync$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        if (ExpoUpdates.checkForUpdateAsync) {\n          _context2.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n      case 2:\n        if (!(__DEV__ || isUsingDeveloperTool)) {\n          _context2.next = 4;\n          break;\n        }\n        throw new CodedError('ERR_UPDATES_DISABLED', \"You cannot check for updates in development mode. \" + manualUpdatesInstructions);\n      case 4:\n        _context2.next = 6;\n        return _regeneratorRuntime.awrap(ExpoUpdates.checkForUpdateAsync());\n      case 6:\n        result = _context2.sent;\n        if (result.manifestString) {\n          result.manifest = JSON.parse(result.manifestString);\n          delete result.manifestString;\n        }\n        return _context2.abrupt(\"return\", result);\n      case 9:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function fetchUpdateAsync() {\n  var result;\n  return _regeneratorRuntime.async(function fetchUpdateAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        if (ExpoUpdates.fetchUpdateAsync) {\n          _context3.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n      case 2:\n        if (!(__DEV__ || isUsingDeveloperTool)) {\n          _context3.next = 4;\n          break;\n        }\n        throw new CodedError('ERR_UPDATES_DISABLED', \"You cannot fetch updates in development mode. \" + manualUpdatesInstructions);\n      case 4:\n        _context3.next = 6;\n        return _regeneratorRuntime.awrap(ExpoUpdates.fetchUpdateAsync());\n      case 6:\n        result = _context3.sent;\n        if (result.manifestString) {\n          result.manifest = JSON.parse(result.manifestString);\n          delete result.manifestString;\n        }\n        return _context3.abrupt(\"return\", result);\n      case 9:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function clearUpdateCacheExperimentalAsync(_sdkVersion) {\n  console.warn(\"This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!\");\n}\nvar _emitter;\nfunction _getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\nfunction _emitEvent(params) {\n  var newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n  if (!_emitter) {\n    throw new Error(\"EventEmitter must be initialized to use from its listener\");\n  }\n  _emitter.emit('Expo.updatesEvent', newParams);\n}\nexport function addListener(listener) {\n  var emitter = _getEmitter();\n  return emitter.addListener('Expo.updatesEvent', listener);\n}","map":{"version":3,"names":["RCTDeviceEventEmitter","CodedError","NativeModulesProxy","UnavailabilityError","EventEmitter","ExpoUpdates","updateId","toLowerCase","releaseChannel","_ExpoUpdates$releaseC","localAssets","_ExpoUpdates$localAss","isEmergencyLaunch","isUsingEmbeddedAssets","_manifest","manifest","manifestString","JSON","parse","_manifest2","isUsingDeveloperTool","_manifest$developer","developer","tool","isUsingExpoDevelopmentClient","_NativeModulesProxy$E","ExponentConstants","appOwnership","manualUpdatesInstructions","reloadAsync","_regeneratorRuntime","async","reloadAsync$","_context","prev","next","reload","__DEV__","awrap","stop","Promise","checkForUpdateAsync","result","checkForUpdateAsync$","_context2","sent","abrupt","fetchUpdateAsync","fetchUpdateAsync$","_context3","clearUpdateCacheExperimentalAsync","_sdkVersion","console","warn","_emitter","_getEmitter","addListener","_emitEvent","params","newParams","Error","emit","listener","emitter"],"sources":["C:\\Users\\alexd\\Documents\\InstagramClone\\frontend\\node_modules\\expo-updates\\src\\Updates.ts"],"sourcesContent":["import {\n  RCTDeviceEventEmitter,\n  CodedError,\n  NativeModulesProxy,\n  UnavailabilityError,\n} from '@unimodules/core';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport ExpoUpdates from './ExpoUpdates';\nimport {\n  Listener,\n  LocalAssets,\n  Manifest,\n  UpdateCheckResult,\n  UpdateEvent,\n  UpdateFetchResult,\n} from './Updates.types';\n\nexport * from './Updates.types';\n\nexport const updateId: string | null =\n  ExpoUpdates.updateId && typeof ExpoUpdates.updateId === 'string'\n    ? ExpoUpdates.updateId.toLowerCase()\n    : null;\nexport const releaseChannel: string = ExpoUpdates.releaseChannel ?? 'default';\nexport const localAssets: LocalAssets = ExpoUpdates.localAssets ?? {};\nexport const isEmergencyLaunch: boolean = ExpoUpdates.isEmergencyLaunch || false;\nexport const isUsingEmbeddedAssets: boolean = ExpoUpdates.isUsingEmbeddedAssets || false;\n\nlet _manifest = ExpoUpdates.manifest;\nif (ExpoUpdates.manifestString) {\n  _manifest = JSON.parse(ExpoUpdates.manifestString);\n}\nexport const manifest: Manifest | object = _manifest ?? {};\n\nconst isUsingDeveloperTool = !!(manifest as any).developer?.tool;\nconst isUsingExpoDevelopmentClient = NativeModulesProxy.ExponentConstants?.appOwnership === 'expo';\nconst manualUpdatesInstructions = isUsingExpoDevelopmentClient\n  ? 'To test manual updates, publish your project using `expo publish` and open the published ' +\n    'version in this development client.'\n  : 'To test manual updates, make a release build with `npm run ios --configuration Release` or ' +\n    '`npm run android --variant Release`.';\n\nexport async function reloadAsync(): Promise<void> {\n  if (!ExpoUpdates.reload) {\n    throw new UnavailabilityError('Updates', 'reloadAsync');\n  }\n  if (__DEV__ && !isUsingExpoDevelopmentClient) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot use the Updates module in development mode in a production app. ${manualUpdatesInstructions}`\n    );\n  }\n  await ExpoUpdates.reload();\n}\n\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExpoUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  if (__DEV__ || isUsingDeveloperTool) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot check for updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.checkForUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\nexport async function fetchUpdateAsync(): Promise<UpdateFetchResult> {\n  if (!ExpoUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  if (__DEV__ || isUsingDeveloperTool) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot fetch updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.fetchUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\nexport function clearUpdateCacheExperimentalAsync(_sdkVersion?: string) {\n  console.warn(\n    \"This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!\"\n  );\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\n\nfunction _emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Expo.updatesEvent', newParams);\n}\n\nexport function addListener(listener: Listener<UpdateEvent>): EventSubscription {\n  const emitter = _getEmitter();\n  return emitter.addListener('Expo.updatesEvent', listener);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}