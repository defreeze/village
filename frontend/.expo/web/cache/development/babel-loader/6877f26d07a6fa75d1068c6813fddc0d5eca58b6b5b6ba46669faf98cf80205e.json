{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _createForOfIteratorHelperLoose(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (t) return (t = t.call(r)).next.bind(t); if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var o = 0; return function () { return o >= r.length ? { done: !0 } : { done: !1, value: r[o++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport * as React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getNativeSourceFromSource, getUnloadedStatus, PlaybackMixin } from \"./AV\";\nimport ExpoVideoManager from \"./ExpoVideoManager\";\nimport ExponentAV from \"./ExponentAV\";\nimport ExponentVideo from \"./ExponentVideo\";\nimport { ResizeMode } from \"./Video.types\";\nexport { ResizeMode };\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nvar _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden'\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain'\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  }\n});\nvar ExpoVideoManagerConstants = ExpoVideoManager;\nvar ExpoVideoViewManager = ExpoVideoManager;\nvar Video = function (_React$Component) {\n  function Video(props) {\n    var _this;\n    _classCallCheck(this, Video);\n    _this = _callSuper(this, Video, [props]);\n    _this._nativeRef = React.createRef();\n    _this._onPlaybackStatusUpdate = null;\n    _this._handleNewStatus = function (status) {\n      if (_this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {\n        _this.setState({\n          showPoster: false\n        });\n      }\n      if (_this.props.onPlaybackStatusUpdate) {\n        _this.props.onPlaybackStatusUpdate(status);\n      }\n      if (_this._onPlaybackStatusUpdate) {\n        _this._onPlaybackStatusUpdate(status);\n      }\n    };\n    _this._performOperationAndHandleStatusAsync = function _callee(operation) {\n      var video, handle, status;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            video = _this._nativeRef.current;\n            if (video) {\n              _context.next = 3;\n              break;\n            }\n            throw new Error(\"Cannot complete operation because the Video component has not yet loaded\");\n          case 3:\n            handle = findNodeHandle(_this._nativeRef.current);\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(operation(handle));\n          case 6:\n            status = _context.sent;\n            _this._handleNewStatus(status);\n            return _context.abrupt(\"return\", status);\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this._setFullscreen = function _callee2(value) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n              return ExpoVideoViewManager.setFullscreen(tag, value);\n            }));\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.presentFullscreenPlayer = function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", _this._setFullscreen(true));\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.presentIOSFullscreenPlayer = function () {\n      console.warn(\"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\");\n      return _this.presentFullscreenPlayer();\n    };\n    _this.presentFullscreenPlayerAsync = function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(_this.presentFullscreenPlayer());\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent);\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.dismissFullscreenPlayer = function _callee5() {\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", _this._setFullscreen(false));\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.dismissIOSFullscreenPlayer = function () {\n      console.warn(\"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\");\n      _this.dismissFullscreenPlayer();\n    };\n    _this.getStatusAsync = function _callee6() {\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n              return ExponentAV.getStatusForVideo(tag);\n            }));\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.loadAsync = function _callee7(source) {\n      var initialStatus,\n        downloadFirst,\n        _await$getNativeSourc,\n        nativeSource,\n        fullInitialStatus,\n        _args7 = arguments;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            initialStatus = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n            downloadFirst = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : true;\n            _context7.next = 4;\n            return _regeneratorRuntime.awrap(getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst));\n          case 4:\n            _await$getNativeSourc = _context7.sent;\n            nativeSource = _await$getNativeSourc.nativeSource;\n            fullInitialStatus = _await$getNativeSourc.fullInitialStatus;\n            return _context7.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n              return ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus);\n            }));\n          case 8:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.unloadAsync = function _callee8() {\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            return _context8.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n              return ExponentAV.unloadForVideo(tag);\n            }));\n          case 1:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.setStatusAsync = function _callee9(status) {\n      return _regeneratorRuntime.async(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            assertStatusValuesInBounds(status);\n            return _context9.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n              return ExponentAV.setStatusForVideo(tag, status);\n            }));\n          case 2:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.replayAsync = function _callee10() {\n      var status,\n        _args10 = arguments;\n      return _regeneratorRuntime.async(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            status = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};\n            if (!(status.positionMillis && status.positionMillis !== 0)) {\n              _context10.next = 3;\n              break;\n            }\n            throw new Error('Requested position after replay has to be 0.');\n          case 3:\n            return _context10.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n              return ExponentAV.replayVideo(tag, _objectSpread(_objectSpread({}, status), {}, {\n                positionMillis: 0,\n                shouldPlay: true\n              }));\n            }));\n          case 4:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this._nativeOnPlaybackStatusUpdate = function (event) {\n      _this._handleNewStatus(event.nativeEvent);\n    };\n    _this._nativeOnLoadStart = function () {\n      if (_this.props.onLoadStart) {\n        _this.props.onLoadStart();\n      }\n    };\n    _this._nativeOnLoad = function (event) {\n      if (_this.props.onLoad) {\n        _this.props.onLoad(event.nativeEvent);\n      }\n      _this._handleNewStatus(event.nativeEvent);\n    };\n    _this._nativeOnError = function (event) {\n      var error = event.nativeEvent.error;\n      if (_this.props.onError) {\n        _this.props.onError(error);\n      }\n      _this._handleNewStatus(getUnloadedStatus(error));\n    };\n    _this._nativeOnReadyForDisplay = function (event) {\n      if (_this.props.onReadyForDisplay) {\n        _this.props.onReadyForDisplay(event.nativeEvent);\n      }\n    };\n    _this._nativeOnFullscreenUpdate = function (event) {\n      if (_this.props.onIOSFullscreenUpdate && _this.props.onFullscreenUpdate) {\n        console.warn(\"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\");\n      } else if (_this.props.onIOSFullscreenUpdate) {\n        console.warn(\"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\");\n      }\n      if (_this.props.onIOSFullscreenUpdate) {\n        _this.props.onIOSFullscreenUpdate(event.nativeEvent);\n      }\n      if (_this.props.onFullscreenUpdate) {\n        _this.props.onFullscreenUpdate(event.nativeEvent);\n      }\n    };\n    _this._renderPoster = function () {\n      return _this.props.usePoster && _this.state.showPoster ? React.createElement(Image, {\n        style: [_STYLES.poster, _this.props.posterStyle],\n        source: _this.props.posterSource\n      }) : null;\n    };\n    _this.state = {\n      showPoster: !!props.usePoster\n    };\n    return _this;\n  }\n  _inherits(Video, _React$Component);\n  return _createClass(Video, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(nativeProps) {\n      var nativeVideo = this._nativeRef.current;\n      if (!nativeVideo) throw new Error(\"native video reference is not defined.\");\n      nativeVideo.setNativeProps(nativeProps);\n    }\n  }, {\n    key: \"setOnPlaybackStatusUpdate\",\n    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var source = getNativeSourceFromSource(this.props.source) || undefined;\n      var nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n      if (this.props.resizeMode) {\n        var resizeMode = this.props.resizeMode;\n        if (resizeMode === ResizeMode.STRETCH) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n        } else if (resizeMode === ResizeMode.CONTAIN) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n        } else if (resizeMode === ResizeMode.COVER) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n        }\n      }\n      var status = _objectSpread({}, this.props.status);\n      ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(function (prop) {\n        if (prop in _this2.props) {\n          status[prop] = _this2.props[prop];\n        }\n      });\n      var nativeProps = _objectSpread(_objectSpread({}, omit(this.props, ['source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource', 'posterStyle'].concat(_toConsumableArray(Object.keys(status))))), {}, {\n        style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n        source: source,\n        resizeMode: nativeResizeMode,\n        status: status,\n        onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n        onLoadStart: this._nativeOnLoadStart,\n        onLoad: this._nativeOnLoad,\n        onError: this._nativeOnError,\n        onReadyForDisplay: this._nativeOnReadyForDisplay,\n        onFullscreenUpdate: this._nativeOnFullscreenUpdate\n      });\n      return React.createElement(View, {\n        style: nativeProps.style,\n        pointerEvents: \"box-none\"\n      }, React.createElement(ExponentVideo, _extends({\n        ref: this._nativeRef\n      }, nativeProps, {\n        style: _STYLES.video\n      })), this._renderPoster());\n    }\n  }]);\n}(React.Component);\nexport { Video as default };\nVideo.RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\nVideo.RESIZE_MODE_COVER = ResizeMode.COVER;\nVideo.RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nVideo.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nVideo.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nVideo.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nVideo.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nfunction omit(props, propNames) {\n  var copied = _objectSpread({}, props);\n  for (var _iterator = _createForOfIteratorHelperLoose(propNames), _step; !(_step = _iterator()).done;) {\n    var propName = _step.value;\n    delete copied[propName];\n  }\n  return copied;\n}\n_extends(Video.prototype, PlaybackMixin);","map":{"version":3,"names":["React","findNodeHandle","Image","StyleSheet","View","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getNativeSourceFromSource","getUnloadedStatus","PlaybackMixin","ExpoVideoManager","ExponentAV","ExponentVideo","ResizeMode","FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT","FULLSCREEN_UPDATE_PLAYER_DID_PRESENT","FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS","FULLSCREEN_UPDATE_PLAYER_DID_DISMISS","IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS","IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS","_STYLES","create","base","overflow","poster","position","left","top","right","bottom","resizeMode","video","ExpoVideoManagerConstants","ExpoVideoViewManager","Video","_React$Component","props","_this","_classCallCheck","_callSuper","_nativeRef","createRef","_onPlaybackStatusUpdate","_handleNewStatus","status","state","showPoster","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","_performOperationAndHandleStatusAsync","_callee","operation","handle","_regeneratorRuntime","async","_callee$","_context","prev","next","current","Error","awrap","sent","abrupt","stop","Promise","_setFullscreen","_callee2","value","_callee2$","_context2","tag","setFullscreen","presentFullscreenPlayer","_callee3","_callee3$","_context3","presentIOSFullscreenPlayer","console","warn","presentFullscreenPlayerAsync","_callee4","_callee4$","_context4","dismissFullscreenPlayer","_callee5","_callee5$","_context5","dismissIOSFullscreenPlayer","getStatusAsync","_callee6","_callee6$","_context6","getStatusForVideo","loadAsync","_callee7","source","initialStatus","downloadFirst","_await$getNativeSourc","nativeSource","fullInitialStatus","_args7","arguments","_callee7$","_context7","length","undefined","loadForVideo","unloadAsync","_callee8","_callee8$","_context8","unloadForVideo","setStatusAsync","_callee9","_callee9$","_context9","setStatusForVideo","replayAsync","_callee10","_args10","_callee10$","_context10","replayVideo","_objectSpread","shouldPlay","_nativeOnPlaybackStatusUpdate","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onIOSFullscreenUpdate","onFullscreenUpdate","_renderPoster","usePoster","createElement","style","posterStyle","posterSource","_inherits","_createClass","key","setNativeProps","nativeProps","nativeVideo","setOnPlaybackStatusUpdate","render","_this2","nativeResizeMode","ScaleNone","STRETCH","ScaleToFill","CONTAIN","ScaleAspectFit","COVER","ScaleAspectFill","forEach","prop","omit","concat","_toConsumableArray","Object","keys","flatten","onStatusUpdate","pointerEvents","_extends","ref","Component","default","RESIZE_MODE_CONTAIN","RESIZE_MODE_COVER","RESIZE_MODE_STRETCH","propNames","copied","_iterator","_createForOfIteratorHelperLoose","_step","done","propName","prototype"],"sources":["C:\\Users\\alexd\\Documents\\InstagramClone\\frontend\\node_modules\\expo-av\\src\\Video.tsx"],"sourcesContent":["import * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackNativeSource,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoNaturalSize,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nexport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoNaturalSize,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackNativeSource,\n};\n\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nexport default class Video extends React.Component<VideoProps, VideoState> implements Playback {\n  static RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\n  static RESIZE_MODE_COVER = ResizeMode.COVER;\n  static RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\n\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  static FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  // componentOrHandle: null | number | React.Component<any, any> | React.ComponentClass<any>\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: AVPlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // ### iOS Fullscreening API ###\n\n  _setFullscreen = async (value: boolean) => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  presentFullscreenPlayer = async () => {\n    return this._setFullscreen(true);\n  };\n\n  presentIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\"\n    );\n    return this.presentFullscreenPlayer();\n  };\n\n  presentFullscreenPlayerAsync = async () => {\n    return await this.presentFullscreenPlayer();\n  };\n\n  dismissFullscreenPlayer = async () => {\n    return this._setFullscreen(false);\n  };\n\n  dismissIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\"\n    );\n    this.dismissFullscreenPlayer();\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  // Loading / unloading API\n\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const {\n      nativeSource,\n      fullInitialStatus,\n    } = await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  // Equivalent to setting URI to null.\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  // Set status API (only available while isLoaded = true)\n\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // ### Callback wrappers ###\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onIOSFullscreenUpdate && this.props.onFullscreenUpdate) {\n      console.warn(\n        \"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\"\n      );\n    } else if (this.props.onIOSFullscreenUpdate) {\n      console.warn(\n        \"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\"\n      );\n    }\n\n    if (this.props.onIOSFullscreenUpdate) {\n      this.props.onIOSFullscreenUpdate(event.nativeEvent);\n    }\n\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () =>\n    this.props.usePoster && this.state.showPoster ? (\n      // @ts-ignore: the react-native type declarations are overly restrictive\n      <Image style={[_STYLES.poster, this.props.posterStyle]} source={this.props.posterSource!} />\n    ) : null;\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach(prop => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    // @ts-ignore: TypeScript thinks \"children\" is not in the list of props\n    const nativeProps: VideoNativeProps = {\n      ...omit(this.props, [\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status),\n      ]),\n      style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style} pointerEvents=\"box-none\">\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={_STYLES.video} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}